import React from 'react';
import CodePanel from '../../Components/CodePanel';

export default () => {
  return (
    <>
      <section className="accent-bottom panel">
        <h2>Highly divisible triangular number</h2>
        <h4>Problem 12</h4>
        <p>
          The sequence of triangle numbers is generated by adding the natural
          numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
          28. The first ten terms would be:
        </p>
        <div className="center">1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</div>
        <p>Let us list the factors of the first seven triangle numbers:</p>
        <table className="concise-table container highlight striped" style={{
          lineHeight : '1rem',
          width: '10rem'
        }}>
          <tbody>
            <tr>
              <td>1:</td>
              <td>1</td>
            </tr>
            <tr>
              <td>3:</td>
              <td>1, 3</td>
            </tr>
            <tr>
              <td>6:</td>
              <td>1, 2, 3, 6</td>
            </tr>
            <tr>
              <td>10:</td>
              <td>1, 2, 5, 10</td>
            </tr>
            <tr>
              <td>15:</td>
              <td>1, 3, 5, 15</td>
            </tr>
            <tr>
              <td>21:</td>
              <td>1, 3, 7, 21</td>
            </tr>
            <tr>
              <td>28:</td>
              <td>1, 2, 4, 7, 14, 28</td>
            </tr>
          </tbody>
        </table>
        <p>
          We can see that 28 is the first triangle number to have over five
          divisors.
        </p>
        <p>
          What is the value of the first triangle number to have over five hundred
          divisors?
        </p>
      </section>
      {/* prettier-ignore */}
      <CodePanel title="JavaScript">{`
        m => {
          let
          primes = [],
          tDividers = 1,
          t1 = 1,
          t2 = 1,

          primeFactorization = n => {
            
            let dividers = 1;
            
            for (let key = 0; primes[key] <= n; key++) {
              
              let power = 1;
              
              while (n % primes[key] === 0) {
                n /= primes[key];
                power++;
              }
              dividers *= power;
            }
            return dividers;
          };

          const
          list = Array(m * 4).fill(true);
          list[0] = list[1] = false;
          
          list.map((v, k) => {
            if (v) {
              primes.push(k);
              for (let key = k * k; key < list.length; key += k) {
                list[key] = false;
              }
            }
          });

          for (var counter = 2; tDividers <= m ; counter++) {
            if (counter % 2) {
              t1 = primeFactorization((counter + 1) / 2);
            }
            else {
              t2 = primeFactorization(counter + 1);
            }
            tDividers = t1 * t2;
          }
          return counter * (counter - 1) / 2;
        }
    `}</CodePanel>
    </>
  );
};