{"version":3,"sources":["Components/Pagination.tsx","Components/Pagination/gsState.ts","Components/Pagination/Item.tsx"],"names":["Pagination","children","itemsPerPage","lastPage","history","useHistory","match","useRouteMatch","currentPage","params","page","items","React","Children","toArray","activeItems","length","slice","aggLastPage","Math","floor","test","undefined","to","gsState","path","replace","options","i","push","value","pagination","className","from","offset","dir","onChange","e","target","state","key","Item","props","classes"],"mappings":"0GAAA,0GAYe,SAASA,EAAT,GAA+E,IAAzDC,EAAwD,EAAxDA,SAAwD,IAA9CC,oBAA8C,MAA/B,EAA+B,EAA5BC,EAA4B,EAA5BA,SAG/DC,EAAUC,cACVC,EAAQC,cACRC,GAAeF,EAAMG,OAAOC,MAAQ,EACpCC,EAAQC,IAAMC,SAASC,QAAQb,GAC/Bc,EAA+B,IAAjBJ,EAAMK,OAChB,EACAR,EAAcN,EAAeA,EACjCQ,EAAOC,EAAMM,MAAMF,EAAaA,EAAcb,GAC9CgB,EAAcf,GAAYgB,KAAKC,MAAMT,EAAMK,OAASd,GAEpD,IACI,QAAQmB,KAAKf,EAAMG,OAAOC,YAA+BY,IAAtBhB,EAAMG,OAAOC,MAClDF,EAAc,GACbA,EAAcU,GAAeA,EAAc,EAE5C,OAAO,cAAC,IAAD,CAAUK,GAAG,SAGtBC,kBAAQ,cAAehB,GACvBgB,kBAAQ,WAAYN,GACpBM,kBAAQ,OAAQlB,EAAMmB,KAAKC,QAAQ,cAAe,IAAM,UAIxD,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,GAAKV,EAAaU,IAChCD,EAAQE,KACN,wBAAgBC,MAAOF,EAAvB,SACGA,GADUA,IAKjB,IAAMG,EACJ,qBAAIC,UAAU,kCAAd,UACE,cAAC,UAAD,CAAMC,KAAM,EAAZ,SACE,mBAAGD,UAAU,iBAAb,0BAEF,cAAC,UAAD,CAAMA,UAAU,qBAAqBE,QAAS,IAC9C,cAAC,UAAD,CAAMA,QAAS,IACf,oBAAIF,UAAU,2BAAd,SACE,wBACEA,UAAU,kBACVG,IAAI,MACJC,SAAU,SAAAC,GAAC,OAAIjC,EAAQyB,KACrBL,kBAAQ,QAAUa,EAAEC,OAAOR,QAE7BA,MAAOtB,EANT,SAOGmB,MAGL,cAAC,UAAD,CAAMO,OAAQ,IACd,cAAC,UAAD,CAAMF,UAAU,qBAAqBE,OAAQ,IAC7C,cAAC,UAAD,CAAMX,GAAIL,EAAV,SACE,mBAAGc,UAAU,iBAAb,4BAKN,OACE,qCACGD,EACA7B,EAAe,EACZ,qBAAK8B,UAAU,MAAf,SAAsBtB,IACtBA,EAEHqB,O,sDC/EP,mDAAMQ,EAAQ,GAEC,SAASf,EAAQgB,EAAaV,GAI3C,OAHIA,IACFS,EAAMC,GAAOV,GAERS,EAAMC,K,+HCMA,SAASC,EAAT,GAA6E,IAA9DxC,EAA6D,EAA7DA,SAAU+B,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,OAAQX,EAA0B,EAA1BA,GAAOmB,EAAmB,6DAGzFlC,EAAcgB,kBAAQ,eACtBrB,EAAWqB,kBAAQ,YACnBc,EAASL,GAAQV,GAAMf,EAAc0B,EAEjCS,GAAWX,EAAYA,EAAY,IAAM,IAAM,eASnD,OAPKC,GAAQzB,EAAc,GAAK,GAC1Be,GAAMf,EAAc,EAAIL,GACzBmC,EAAS,GACTA,EAASnC,KACVwC,EAAU,QAIZ,4CAAIX,UAAWW,GAAaD,GAA5B,aACE,cAAC,IAAD,CAAMnB,GAAIC,kBAAQ,QAAUc,EAA5B,SACGrC,GAAYqC","file":"static/js/51.66d625e1.chunk.js","sourcesContent":["import React from 'react';\nimport { Redirect, useHistory, useRouteMatch } from 'react-router-dom';\nimport Item from './Pagination/Item';\nimport gsState from './Pagination/gsState';\nimport './Pagination/Style.scss';\n\ninterface PaginationProp {\n  children: React.ReactNode;\n  itemsPerPage?: number;\n  lastPage?: number;\n}\n\nexport default function Pagination({ children, itemsPerPage = 1, lastPage }: PaginationProp) {\n\n  const\n  history = useHistory(),\n  match = useRouteMatch() as any,\n  currentPage = +match.params.page || 1,\n  items = React.Children.toArray(children),\n  activeItems = items.length === 1\n    ? 0\n    : currentPage * itemsPerPage - itemsPerPage,\n  page = items.slice(activeItems, activeItems + itemsPerPage),\n  aggLastPage = lastPage || Math.floor(items.length / itemsPerPage);\n\n  if (\n    (!/^\\d+$/.test(match.params.page) && match.params.page !== undefined) ||\n    currentPage < 1 ||\n    (currentPage > aggLastPage && aggLastPage > 0)\n  ) {\n    return <Redirect to=\"/404\" />;\n  }\n\n  gsState('currentPage', currentPage);\n  gsState('lastPage', aggLastPage);\n  gsState('path', match.path.replace('/page/:page', '') + '/page/');\n\n  let options = [];\n\n  for (let i = 1; i <= aggLastPage; i++) {\n    options.push(\n      <option key={i} value={i}>\n        {i}\n      </option>\n    );\n  }\n  const pagination = (\n    <ul className=\"center-content pagination panel\">\n      <Item from={1}>\n        <i className=\"material-icons\">first_page</i>\n      </Item>\n      <Item className=\"hide-on-small-only\" offset={-2} />\n      <Item offset={-1} />\n      <li className=\"input-field waves-effect\">\n        <select\n          className=\"browser-default\"\n          dir=\"rtl\"\n          onChange={e => history.push(\n            gsState('path') + e.target.value\n          )}\n          value={currentPage}>\n          {options}\n        </select>\n      </li>\n      <Item offset={1} />\n      <Item className=\"hide-on-small-only\" offset={2} />\n      <Item to={aggLastPage}>\n        <i className=\"material-icons\">last_page</i>\n      </Item>\n    </ul>\n  );\n\n  return (\n    <>\n      {pagination}\n      {itemsPerPage > 1\n        ? <div className=\"row\">{page}</div>\n        : page\n      }\n      {pagination}\n    </>\n  );\n};","const state = {} as any;\n\nexport default function gsState(key: string, value?: any) {\n  if (value) {\n    state[key] = value;\n  }\n  return state[key];\n};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport gsState from './gsState';\n\ninterface ItemProps {\n  children?: React.ReactNode;\n  className?: string;\n  from?: number;\n  offset?: number;\n  to?: number;\n}\n\nexport default function Item({children, className, from, offset, to, ...props}: ItemProps) {\n\n  const\n  currentPage = gsState('currentPage'),\n  lastPage = gsState('lastPage'),\n  target = from || to || currentPage + offset!;\n\n  let classes = (className ? className + ' ' : '') + 'waves-effect';\n\n  if ((from && currentPage - 3 <= 0)\n    || (to && currentPage + 3 > lastPage)\n    || target < 1\n    || target > lastPage) {\n      classes = 'hide';\n  }\n\n  return (\n    <li className={classes} {...props}>\n      <Link to={gsState('path') + target}>\n        {children || target}\n      </Link>\n    </li>\n  );\n};"],"sourceRoot":""}