{"version":3,"sources":["Snippets/Typescript.tsx","Components/CodePanel.tsx","Hooks/useToast.ts","Components/CodePanel/removeIndentation.ts"],"names":["Typescript","className","href","title","CodePanel","React","memo","children","onInput","code","removeIndentation","toast","useToast","useEffect","onClick","e","text","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","useState","message","setMessage","M","completeCallback","displayLength","html","Toast","dismissAll","lines","split","pop","shift","indentation","match","map","line","replace","join"],"mappings":"gHAAA,kEAEe,SAASA,IACtB,OACE,qCACE,0BAASC,UAAU,QAAnB,UACE,uDACA,iDACA,8MAKA,mBAAGC,KAAK,uDAAR,kEAGA,wGAIF,cAAC,UAAD,CAAWC,MAAM,OAAjB,gJAIA,yBAASF,UAAU,QAAnB,SACE,6HAKF,0BAASA,UAAU,QAAnB,UACE,iDACA,ubASF,cAAC,UAAD,CAAWE,MAAM,aAAjB,2DAGA,yBAASF,UAAU,QAAnB,SACE,qeAWF,cAAC,UAAD,CAAWE,MAAM,gBAAjB,4LAUA,yDAEA,cAAC,UAAD,CAAWA,MAAM,aAAjB,yLAUA,0BAASF,UAAU,QAAnB,UACA,6CACA,wBAAOA,UAAU,6BAAjB,UACE,gCACE,+BACE,sCACA,2CAGJ,kCACE,+BACE,yCACA,2CAEF,+BACE,wCACA,6CAEF,+BACE,wCACA,6CAEF,+BACE,uCACA,6DAEF,+BACE,uCACA,6DAEF,+BACE,sCACA,iEAEF,+BACE,qCACA,0CAEF,+BACE,sCACA,2CAEF,+BACE,sCACA,2CAEF,+BACE,2CACA,gDAEF,+BACE,uCACA,4CAEF,+BACE,wCACA,wEAKN,6CACA,cAAC,UAAD,CAAWE,MAAM,aAAjB,6DAGA,qDACA,4CACA,cAAC,UAAD,CAAWA,MAAM,aAAjB,uHAMA,oD,4ECvJN,2DAWMC,EAAYC,IAAMC,MAAK,YAA6D,IAA1DC,EAAyD,EAAzDA,SAAyD,IAA/CC,eAA+C,MAArC,aAAqC,EAA3BL,EAA2B,EAA3BA,MAG5DM,EAAOC,kBAAkBH,GACzBI,EAAQC,oBAIR,OAFAC,qBAAU,kBAAML,EAAQC,KAAO,CAACD,EAASC,IAGvC,sBAAKR,UAAU,wBAAf,UACE,6BAAKE,IACL,wBACAF,UAAU,QACVa,QAAS,SAAAC,GACP,IAAMC,EAAOD,EAAEE,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAUP,GAC7BQ,MAAK,kBAAMb,EAAM,0BACjBc,OAAM,kBAAMd,EAAM,gCANrB,+BAUA,8BACE,sBACAe,iBAAe,EACfC,WAAW,QACXC,gCAAgC,EAChCpB,QAAS,SAAAO,GACP,IAAMc,EAAKd,EAAEe,OACbtB,EAAQqB,EAAGT,cANb,SAQGX,YAOIL,a,0HC5CA,SAASQ,IAEtB,MAA8BmB,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATApB,qBAAU,WAMR,OALAmB,GAAWE,IAAEvB,MAAM,CACjBwB,iBAAkB,kBAAMF,EAAW,KACnCG,cAAe,IACfC,KAAML,IAED,kBAAME,IAAEI,MAAMC,gBACpB,CAACP,IAEGC,I,gCCjBM,SAASvB,EAAkBM,GACxC,IAAMwB,EAAQxB,EAAKyB,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAAQJ,EAAY,GAAI,OACjDJ,GACFS,KAAK,QAVT","file":"static/js/46.20a647f6.chunk.js","sourcesContent":["import CodePanel from '../Components/CodePanel';\n\nexport default function Typescript() {\n  return (\n    <>\n      <section className=\"panel\">\n        <h2>A Guide to Typescript</h2>\n        <h4>Getting Started</h4>\n        <p>\n          This guide will outline how to port your existing CRA application from\n          ES to Typescript. If you are using CRA like I do, you can safely follow\n          the offial documentation here:\n        </p>\n        <a href=\"https://create-react-app.dev/docs/adding-typescript/\">\n          https://create-react-app.dev/docs/adding-typescript/\n        </a>\n        <p>\n          Or simply stick to this guide and do it the minimalist and lazy way.\n        </p>\n      </section>\n      <CodePanel title=\"Bash\">{`\n        npm i -D @types/node @types/react @types/react-dom @types/react-router\n        @types/react-router-dom typescript\n    `}</CodePanel>\n      <section className=\"panel\">\n        <p>\n          Next rename all your file extensions in the src subdirectory: .js to .ts\n          and .jsx to .tsx.\n        </p>\n      </section>\n      <section className=\"panel\">\n        <h4>Troubleshooting</h4>\n        <p>\n          Now it is time to fix missing types. As usual, your best approach is\n          Google. Search for the types of your 3rd party dependencies which are\n          usually hosted on npm. Another good resource is DefinitelyTyped on\n          github. If you cannot find the right @types for the 3rd party library,\n          open up your project directory. Inside src you will find a file named\n          react-app-env. Declare every library without types here:\n        </p>\n      </section>\n      <CodePanel title=\"TypeScript\">{`\n        declare module 'libraryname';\n    `}</CodePanel>\n      <section className=\"panel\">\n        <p>\n          If you have a bunch components that you do not want to translate from ES\n          to Typescript straight away, you can add them onto the exclude array.\n          This will allow you to start fresh and not worrying about old code. ES\n          code will work without porting, since it is a subset of Typescript. To\n          ignore your newly renamed files from src, open up tsconfig.json and\n          create an exclude array. Add any file to the array that you do not want\n          to rewrite straight away.\n        </p>\n      </section>\n      {/* prettier-ignore */}\n      <CodePanel title=\"tsconfig.json\">{`\n        \"exclude\": [\n          \"src/App.tsx\",\n          \"src/Router.tsx\",\n          \"src/index.tsx\"\n        ],\n        \"include\": [\n          \"src\"\n        ]\n      `}</CodePanel>\n      <h2>Shallow Dive into Types</h2>\n      {/* prettier-ignore */}\n      <CodePanel title=\"TypeScript\">{`\n        //explicite type declaration\n        let a: number;\n\n        //implicite type declaration\n        let b = 5;\n\n        //implicite any\n        let c;\n    `}</CodePanel>\n      <section className=\"panel\">\n      <h2>Basic Types</h2>\n      <table className=\"highlight responsive-table\">\n        <thead>\n          <tr>\n            <th>Type</th>\n            <th>Code</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Boolean</td>\n            <td>: bool</td>\n          </tr>\n          <tr>\n            <td>Number</td>\n            <td>: number</td>\n          </tr>\n          <tr>\n            <td>String</td>\n            <td>: string</td>\n          </tr>\n          <tr>\n            <td>Array</td>\n            <td>: string[] or : number[]</td>\n          </tr>\n          <tr>\n            <td>Tuple</td>\n            <td>: [bool, number, string]</td>\n          </tr>\n          <tr>\n            <td>Enum</td>\n            <td>enum Color &#123; Red, Blue = 4 &#125;</td>\n          </tr>\n          <tr>\n            <td>Any</td>\n            <td>: any</td>\n          </tr>\n          <tr>\n            <td>Void</td>\n            <td>: void</td>\n          </tr>\n          <tr>\n            <td>Null</td>\n            <td>: null</td>\n          </tr>\n          <tr>\n            <td>Undefined</td>\n            <td>: undefined</td>\n          </tr>\n          <tr>\n            <td>Never</td>\n            <td>: never</td>\n          </tr>\n          <tr>\n            <td>Object</td>\n            <td>&#123; key1: bool, key2?: any &#125;</td>\n          </tr>\n        </tbody>\n      </table>\n      </section>\n      <h2>Union Types</h2>\n      <CodePanel title=\"TypeScript\">{`\n        let a: number | boolean | null;\n    `}</CodePanel>\n      <h2>Optional Parameters</h2>\n      <h2>Interfaces</h2>\n      <CodePanel title=\"TypeScript\">{`\n        interface Person {\n          firstName: string,\n          lastName: string\n        }\n      `}</CodePanel>\n      <h2>setter getter</h2>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport removeIndentation from './CodePanel/removeIndentation';\nimport useToast from '../Hooks/useToast';\nimport './CodePanel/Style.scss';\n\ninterface CodePanelProps {\n  children: React.ReactNode;\n  onInput?: (text: string) => void;\n  title: string;\n}\n\nconst CodePanel = React.memo(({ children, onInput = () => {}, title}: CodePanelProps) => {\n\n  const\n  code = removeIndentation(children as string),\n  toast = useToast();\n\n  useEffect(() => onInput(code), [onInput, code]);\n\n  return (\n    <div className=\"panel language-markup\">\n      <h3>{title}</h3>\n      <button\n      className=\"reset\"\n      onClick={e => {\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\n        navigator.clipboard.writeText(text)\n        .then(() => toast('copied to clipboard'))\n        .catch(() => toast('copy to clipboard failed'));       \n      }}>\n        Copy to Clipboard\n      </button>\n      <pre>\n        <code\n        contentEditable\n        spellCheck=\"false\"\n        suppressContentEditableWarning={true}\n        onInput={e => {\n          const el = e.target as HTMLElement;\n          onInput(el.textContent as string);\n        }}>\n          {code}\n        </code>\n      </pre>\n    </div>\n  );\n});\n\nexport default CodePanel;","import { useEffect, useState } from \"react\";\nimport M from 'materialize-css';\nimport './useToast/Style.scss';\n\nexport default function useToast() {\n\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    message && M.toast({\n      completeCallback: () => setMessage(''),\n      displayLength: 2000,\n      html: message\n    });\n    return () => M.Toast.dismissAll();\n  }, [message]);\n\n  return setMessage;\n};","export default function removeIndentation(text: string) {\n  const lines = text.split(/\\r|\\n/);\n  lines.pop();\n  lines.shift();\n\n  const indentation = lines[0].match(/^\\s+/g) || [];\n\n  return (indentation\n    ? lines.map((line) => line.replace(indentation[0], ''))\n    : lines\n  ).join('\\r\\n');\n};"],"sourceRoot":""}