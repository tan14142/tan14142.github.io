{"version":3,"sources":["Hooks/useIntersectionObserver.ts"],"names":["thresholds","useState","viewRatio","setViewRatio","ref","useRef","observer","IntersectionObserver","entry","intersectionRatio","useEffect","current","target","observe","unobserve"],"mappings":"2HAEe,qBAA0B,IAAzBA,EAAwB,uDAAX,CAAC,EAAG,GAAO,EAGVC,mBAAS,GAHC,mBAGrCC,EAHqC,KAG1BC,EAH0B,KAItCC,EAAMC,iBAAgB,MAEtBC,EAAW,IAAIC,sBACb,SAAAC,GACEL,EAAaK,EAAM,GAAGC,qBAExBT,GAWF,OARAU,qBAAU,WACR,GAAIN,EAAIO,QAAS,CACf,IAAMC,EAASR,EAAIO,QAEnB,OADAL,EAASO,QAAQD,GACV,kBAAMN,EAASQ,UAAUF,OAEjC,CAACN,IAEG,CAACJ,EAAWE","file":"static/js/56.5b739ebf.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport default (thresholds = [0, 1]) => {\n  \n  const\n  [viewRatio, setViewRatio] = useState(0),\n  ref = useRef<Element>(null),\n  \n  observer = new IntersectionObserver(\n    entry => {\n      setViewRatio(entry[0].intersectionRatio);\n    },\n    thresholds as IntersectionObserverInit\n  );\n  \n  useEffect(() => {\n    if (ref.current) {\n      const target = ref.current;\n      observer.observe(target);\n      return () => observer.unobserve(target);\n    }\n  }, [observer]);\n  \n  return [viewRatio, ref];\n};"],"sourceRoot":""}