{"version":3,"sources":["Components/Pagination/gsState.ts","Components/Pagination/Item.tsx","Components/Pagination.tsx"],"names":["state","key","value","children","className","from","offset","to","props","currentPage","gsState","lastPage","target","classes","itemsPerPage","history","useHistory","match","useRouteMatch","params","page","items","React","Children","toArray","activeItems","length","slice","aggLastPage","Math","floor","isNaN","path","replace","options","i","push","pagination","dir","onChange","e"],"mappings":"2HAAA,WAAMA,EAAQ,GAEC,mBAACC,EAAaC,GAI3B,OAHIA,IACFF,EAAMC,GAAOC,GAERF,EAAMC,K,kFCMA,sBAAmE,IAAjEE,EAAgE,EAAhEA,SAAUC,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,GAAOC,EAAsB,6DAG/EC,EAAcC,kBAAQ,eACtBC,EAAWD,kBAAQ,YACnBE,EAASP,GAAQE,GAAME,EAAcH,EAEjCO,EAAUT,EACVA,EAAY,IAEZ,eASJ,OAPKC,GAAQI,EAAc,GAAK,GAC3BF,GAAME,EAAc,EAAIE,GACzBC,EAAS,GACTA,EAASD,KACXE,EAAU,QAIV,sCAAIT,UAAWS,GAAaL,GAC1B,kBAAC,IAAD,CAAMD,GAAIG,kBAAQ,QAAUE,GACzBT,GAAYS,M,gCClCrB,yDAYe,sBAA+D,IAA5DT,EAA2D,EAA3DA,SAA2D,IAAjDW,oBAAiD,MAAlC,EAAkC,EAA/BH,EAA+B,EAA/BA,SAG5CI,EAAUC,cACVC,EAAQC,cACRT,GAAeQ,EAAME,OAAOC,MAAQ,EACpCC,EAAQC,IAAMC,SAASC,QAAQrB,GAC/BsB,EAA+B,IAAjBJ,EAAMK,OAChB,EACAjB,EAAcK,EAAeA,EACjCM,EAAOC,EAAMM,MAAMF,EAAaA,EAAcX,GAC9Cc,EAAcjB,GAAYkB,KAAKC,MAAMT,EAAMK,OAASZ,GAEpD,GACEiB,MAAMtB,IACNA,EAAc,GACbA,EAAcmB,GAAeA,EAAc,EAE5C,OAAO,kBAAC,IAAD,CAAUrB,GAAG,SAGtBG,kBAAQ,cAAeD,GACvBC,kBAAQ,WAAYkB,GACpBlB,kBAAQ,OAAQO,EAAMe,KAAKC,QAAQ,cAAe,IAAM,UAIxD,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,GAAKP,EAAaO,IAChCD,EAAQE,KACN,4BAAQnC,IAAKkC,EAAGjC,MAAOiC,GACpBA,IAIP,IAAME,EACJ,wBAAIjC,UAAU,iDACZ,kBAAC,UAAD,CAAMC,KAAM,GACV,uBAAGD,UAAU,kBAAb,eAEF,kBAAC,UAAD,CAAMA,UAAU,qBAAqBE,QAAS,IAC9C,kBAAC,UAAD,CAAMA,QAAS,IACf,wBAAIF,UAAU,4BACZ,4BACEA,UAAU,kBACVkC,IAAI,MACJC,SAAU,SAAAC,GAAC,OAAIzB,EAAQqB,KACrB1B,kBAAQ,QAAU8B,EAAE5B,OAAOV,QAE7BA,MAAOO,GACNyB,IAGL,kBAAC,UAAD,CAAM5B,OAAQ,IACd,kBAAC,UAAD,CAAMF,UAAU,qBAAqBE,OAAQ,IAC7C,kBAAC,UAAD,CAAMC,GAAIqB,GACR,uBAAGxB,UAAU,kBAAb,eAKN,OACE,oCACGiC,EACAvB,EAAe,EACZ,yBAAKV,UAAU,OAAOgB,GACtBA,EAEHiB","file":"static/js/42.f6b45c91.chunk.js","sourcesContent":["const state = {} as any;\n\nexport default (key: string, value?: any) => {\n  if (value) {\n    state[key] = value;\n  }\n  return state[key];\n};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport gsState from './gsState';\n\ninterface ItemProps {\n  children?: React.ReactNode;\n  className?: string;\n  from?: number;\n  offset?: number;\n  to?: number;\n}\n\nexport default ({children, className, from, offset, to, ...props}: ItemProps) => {\n\n  const\n  currentPage = gsState('currentPage'),\n  lastPage = gsState('lastPage'),\n  target = from || to || currentPage + offset!;\n\n  let classes = className\n    ? className + ' '\n    : ''\n    + 'waves-effect';\n\n  if ((from && currentPage - 3 <= 0)\n   || (to && currentPage + 3 > lastPage)\n   || target < 1\n   || target > lastPage) {\n    classes = 'hide';\n  }\n\n  return (\n    <li className={classes} {...props}>\n      <Link to={gsState('path') + target}>\n        {children || target}\n      </Link>\n    </li>\n  );\n};","import React from 'react';\nimport { Redirect, useHistory, useRouteMatch } from 'react-router-dom';\nimport Item from './Pagination/Item';\nimport gsState from './Pagination/gsState';\nimport './Pagination/Style.scss';\n\ninterface PaginationProp {\n  children: React.ReactNode;\n  itemsPerPage?: number;\n  lastPage?: number;\n}\n\nexport default ({ children, itemsPerPage = 1, lastPage }: PaginationProp) => {\n\n  const\n  history = useHistory(),\n  match = useRouteMatch() as any,\n  currentPage = +match.params.page || 1,\n  items = React.Children.toArray(children),\n  activeItems = items.length === 1\n    ? 0\n    : currentPage * itemsPerPage - itemsPerPage,\n  page = items.slice(activeItems, activeItems + itemsPerPage),\n  aggLastPage = lastPage || Math.floor(items.length / itemsPerPage);\n\n  if (\n    isNaN(currentPage) ||\n    currentPage < 1 ||\n    (currentPage > aggLastPage && aggLastPage > 0)\n  ) {\n    return <Redirect to=\"/404\" />;\n  }\n\n  gsState('currentPage', currentPage);\n  gsState('lastPage', aggLastPage);\n  gsState('path', match.path.replace('/page/:page', '') + '/page/');\n\n  let options = [];\n\n  for (let i = 1; i <= aggLastPage; i++) {\n    options.push(\n      <option key={i} value={i}>\n        {i}\n      </option>\n    );\n  }\n  const pagination = (\n    <ul className=\"center-content pagination panel panel-rounded\">\n      <Item from={1}>\n        <i className=\"material-icons\">first_page</i>\n      </Item>\n      <Item className=\"hide-on-small-only\" offset={-2} />\n      <Item offset={-1} />\n      <li className=\"input-field waves-effect\">\n        <select\n          className=\"browser-default\"\n          dir=\"rtl\"\n          onChange={e => history.push(\n            gsState('path') + e.target.value\n          )}\n          value={currentPage}>\n          {options}\n        </select>\n      </li>\n      <Item offset={1} />\n      <Item className=\"hide-on-small-only\" offset={2} />\n      <Item to={aggLastPage}>\n        <i className=\"material-icons\">last_page</i>\n      </Item>\n    </ul>\n  );\n\n  return (\n    <>\n      {pagination}\n      {itemsPerPage > 1\n        ? <div className=\"row\">{page}</div>\n        : page\n      }\n      {pagination}\n    </>\n  );\n};"],"sourceRoot":""}