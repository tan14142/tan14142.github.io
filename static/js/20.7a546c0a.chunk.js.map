{"version":3,"sources":["Projects/ProjectEuler/P26.tsx","Components/CodePanel.tsx","Components/CodePanel/removeIndentation.ts"],"names":["className","title","React","memo","children","onInput","code","removeIndentation","toast","useToast","useEffect","onClick","e","text","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","lines","split","pop","shift","indentation","match","map","line","replace","join"],"mappings":"sGAAA,mCAGe,qBACb,OACE,oCACE,6BAASA,UAAU,uBACjB,iDACA,0CACA,iKAKA,wBAAIA,UAAU,UACZ,0CACA,8CACA,2CACA,4CACA,+CACA,mDACA,8CACA,8CACA,6CAEF,wJAIA,2IAKF,kBAAC,UAAD,CAAWC,MAAM,cAAjB,g7B,sDClCN,kDAWeC,cAAMC,MAAK,YAA6D,IAA1DC,EAAyD,EAAzDA,SAAyD,IAA/CC,eAA+C,MAArC,aAAqC,EAA3BJ,EAA2B,EAA3BA,MAGzDK,EAAOC,kBAAkBH,GACzBI,EAAQC,oBAIR,OAFAC,qBAAU,kBAAML,EAAQC,KAAO,CAACD,EAASC,IAGvC,yBAAKN,UAAU,yBACb,4BAAKC,GACL,4BACAD,UAAU,QACVW,QAAS,SAAAC,GACP,IAAMC,EAAOD,EAAEE,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAUP,GAC7BQ,MAAK,kBAAMb,EAAM,0BACjBc,OAAM,kBAAMd,EAAM,iCANrB,qBAUA,6BACE,0BACAe,iBAAe,EACfC,WAAW,QACXC,gCAAgC,EAChCpB,QAAS,SAAAO,GACP,IAAMc,EAAKd,EAAEe,OACbtB,EAAQqB,EAAGT,eAEVX,S,gCCzCX,OAAe,mBAACO,GACd,IAAMe,EAAQf,EAAKgB,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAAQJ,EAAY,GAAI,OACjDJ,GACFS,KAAK","file":"static/js/20.7a546c0a.chunk.js","sourcesContent":["import React from 'react';\nimport CodePanel from '../../Components/CodePanel';\n\nexport default () => {\n  return (\n    <>\n      <section className=\"accent-bottom panel\">\n        <h2>Reciprocal cycles</h2>\n        <h4>Problem 26</h4>\n        <p>\n          A unit fraction contains 1 in the numerator. The decimal\n          representation of the unit fractions with denominators\n          2 to 10 are given:\n        </p>\n        <ol className=\"padded\">\n          <li>½\t= 0.5</li>\n          <li>⅓\t= 0.(3)</li>\n          <li>¼\t= 0.25</li>\n          <li>⅕\t= 0.2</li>\n          <li>⅙\t= 0.1(6)</li>\n          <li>⅐\t= 0.(142857)</li>\n          <li>⅛\t= 0.125</li>\n          <li>⅑\t= 0.(1)</li>\n          <li>⅒\t= 0.1</li>\n        </ol>\n        <p>\n          Where 0.1(6) means 0.166666..., and has a 1-digit recurring\n          cycle. It can be seen that 1/7 has a 6-digit recurring cycle.\n        </p>\n        <p>\n          Find the value of d &lt; 1000 for which 1/d contains the longest\n          recurring cycle in its decimal fraction part.\n        </p>\n      </section>\n      <CodePanel title=\"JavaScript\">{`\n        m => {\n          let\n          maxIndex = 0,\n          maxLength = 0;\n        \n          for (let i = m; i > 1; --i) {\n          \n            let\n            counter = 0,\n            dividend = 1,\n            length = 0,\n            reciprocals = [],\n            remainder = 1;\n            \n            while (true) {\n              dividend = remainder * 10;\n              remainder = dividend % i;\n              \n              if (remainder === 0) {\n                break;\n              }\n              if (reciprocals[remainder]) {\n                length = counter - reciprocals[remainder];\n                break;\n              }\n              \n              reciprocals[remainder] = counter++;\n            }\n            \n            if (length > maxLength) {\n              maxIndex = i;\n              maxLength = length;\n            }\n          }\n          return maxIndex;\n        }\n    `}</CodePanel>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport removeIndentation from './CodePanel/removeIndentation';\nimport useToast from '../Hooks/useToast';\nimport './CodePanel/Style.scss';\n\ninterface CodePanelProps {\n  children: React.ReactNode;\n  onInput?: (text: string) => void;\n  title: string;\n}\n\nexport default React.memo(({ children, onInput = () => {}, title}: CodePanelProps) => {\n\n  const\n  code = removeIndentation(children as string),\n  toast = useToast();\n\n  useEffect(() => onInput(code), [onInput, code]);\n\n  return (\n    <div className=\"panel language-markup\">\n      <h3>{title}</h3>\n      <button\n      className=\"reset\"\n      onClick={e => {\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\n        navigator.clipboard.writeText(text)\n        .then(() => toast('copied to clipboard'))\n        .catch(() => toast('copy to clipboard failed'));       \n      }}>\n        Copy to Clipboard\n      </button>\n      <pre>\n        <code\n        contentEditable\n        spellCheck=\"false\"\n        suppressContentEditableWarning={true}\n        onInput={e => {\n          const el = e.target as HTMLElement;\n          onInput(el.textContent as string);\n        }}>\n          {code}\n        </code>\n      </pre>\n    </div>\n  );\n});","export default (text: string) => {\n  const lines = text.split(/\\r|\\n/);\n  lines.pop();\n  lines.shift();\n\n  const indentation = lines[0].match(/^\\s+/g) || [];\n\n  return (indentation\n    ? lines.map((line) => line.replace(indentation[0], ''))\n    : lines\n  ).join('\\r\\n');\n};"],"sourceRoot":""}