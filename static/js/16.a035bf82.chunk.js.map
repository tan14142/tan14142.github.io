{"version":3,"sources":["Projects/ProjectEuler/P22.tsx","Components/CodePanel.tsx","Components/CodePanel/removeIndentation.ts"],"names":["className","href","title","React","memo","children","onInput","code","removeIndentation","toast","useToast","useEffect","onClick","e","text","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","lines","split","pop","shift","indentation","match","map","line","replace","join"],"mappings":"sGAAA,mCAGe,qBACb,OACE,oCACE,6BAASA,UAAU,uBACjB,4CACA,0CACA,oCACQ,uBAAGC,KAAK,mCAAR,aADR,oSAOA,mOAKA,qFAEF,kBAAC,UAAD,CAAWC,MAAM,cAAjB,mnB,sDCvBN,kDAWeC,cAAMC,MAAK,YAA6D,IAA1DC,EAAyD,EAAzDA,SAAyD,IAA/CC,eAA+C,MAArC,aAAqC,EAA3BJ,EAA2B,EAA3BA,MAGzDK,EAAOC,kBAAkBH,GACzBI,EAAQC,oBAIR,OAFAC,qBAAU,kBAAML,EAAQC,KAAO,CAACD,EAASC,IAGvC,yBAAKP,UAAU,yBACb,4BAAKE,GACL,4BACAF,UAAU,QACVY,QAAS,SAAAC,GACP,IAAMC,EAAOD,EAAEE,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAUP,GAC7BQ,MAAK,kBAAMb,EAAM,0BACjBc,OAAM,kBAAMd,EAAM,iCANrB,qBAUA,6BACE,0BACAe,iBAAe,EACfC,WAAW,QACXC,gCAAgC,EAChCpB,QAAS,SAAAO,GACP,IAAMc,EAAKd,EAAEe,OACbtB,EAAQqB,EAAGT,eAEVX,S,gCCzCX,OAAe,mBAACO,GACd,IAAMe,EAAQf,EAAKgB,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAAQJ,EAAY,GAAI,OACjDJ,GACFS,KAAK","file":"static/js/16.a035bf82.chunk.js","sourcesContent":["import React from 'react';\nimport CodePanel from '../../Components/CodePanel';\n\nexport default () => {\n  return (\n    <>\n      <section className=\"accent-bottom panel\">\n        <h2>Names scores</h2>\n        <h4>Problem 22</h4>\n        <p>\n          Using <a href=\"/Projects/Project-Euler/P22.txt\">names.txt</a> (right click and 'Save Link/Target As...'), a 46K text\n          file containing over five-thousand first names, begin by sorting it into\n          alphabetical order. Then working out the alphabetical value for each\n          name, multiply this value by its alphabetical position in the list to\n          obtain a name score.\n        </p>\n        <p>\n          For example, when the list is sorted into alphabetical order, COLIN,\n          which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.\n          So, COLIN would obtain a score of 938 Ã— 53 = 49714.\n        </p>\n        <p>What is the total of all the name scores in the file?</p>\n      </section>\n      <CodePanel title=\"JavaScript\">{`\n        () => {\n          const\n          fs = require('fs'),    \n          buffer = fs.readFileSync(process.cwd() + '/public/Projects/Project-Euler/P22.txt'),\n          names = String(buffer).split(',').sort(),\n          scores = {};\n\n          for (let i = 0; i <= 90 - 65; i++) {\n            scores[String.fromCharCode(65 + i)] = i + 1;\n          }\n\n          return names.reduce((total, name, index) => {\n            return total + (index + 1) * name.slice(1, -1).split('').reduce((score, letter) => {\n              return score + scores[letter];\n            }, 0);\n          }, 0);\n        }\n    `}</CodePanel>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport removeIndentation from './CodePanel/removeIndentation';\nimport useToast from '../Hooks/useToast';\nimport './CodePanel/Style.scss';\n\ninterface CodePanelProps {\n  children: React.ReactNode;\n  onInput?: (text: string) => void;\n  title: string;\n}\n\nexport default React.memo(({ children, onInput = () => {}, title}: CodePanelProps) => {\n\n  const\n  code = removeIndentation(children as string),\n  toast = useToast();\n\n  useEffect(() => onInput(code), [onInput, code]);\n\n  return (\n    <div className=\"panel language-markup\">\n      <h3>{title}</h3>\n      <button\n      className=\"reset\"\n      onClick={e => {\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\n        navigator.clipboard.writeText(text)\n        .then(() => toast('copied to clipboard'))\n        .catch(() => toast('copy to clipboard failed'));       \n      }}>\n        Copy to Clipboard\n      </button>\n      <pre>\n        <code\n        contentEditable\n        spellCheck=\"false\"\n        suppressContentEditableWarning={true}\n        onInput={e => {\n          const el = e.target as HTMLElement;\n          onInput(el.textContent as string);\n        }}>\n          {code}\n        </code>\n      </pre>\n    </div>\n  );\n});","export default (text: string) => {\n  const lines = text.split(/\\r|\\n/);\n  lines.pop();\n  lines.shift();\n\n  const indentation = lines[0].match(/^\\s+/g) || [];\n\n  return (indentation\n    ? lines.map((line) => line.replace(indentation[0], ''))\n    : lines\n  ).join('\\r\\n');\n};"],"sourceRoot":""}