{"version":3,"sources":["Hooks/useToast.ts","Components/CodePanel.tsx","Components/CodePanel/removeIndentation.ts","Components/Tabs.tsx","Components/CodePanel/Code.tsx","Projects/ProjectEuler/P11.tsx"],"names":["useToast","useState","message","setMessage","useEffect","M","toast","completeCallback","displayLength","html","Toast","dismissAll","CodePanel","lang","onInput","className","tabs","Object","keys","entries","map","entry","key","content","removeIndentation","text","lines","split","pop","shift","indentation","match","line","replace","join","Tabs","children","elRef","useRef","init","current","destroy","ref","title","to","React","Children","toArray","child","id","Code","code","onClick","e","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","P11","JavaScript","Python"],"mappings":"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","file":"static/js/4.26631e7c.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport M from 'materialize-css';\r\nimport './useToast/Style.scss';\r\n\r\nexport default function useToast() {\r\n\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    message && M.toast({\r\n      completeCallback: () => setMessage(''),\r\n      displayLength: 2000,\r\n      html: message\r\n    });\r\n    return () => M.Toast.dismissAll();\r\n  }, [message]);\r\n\r\n  return setMessage;\r\n};","import Code from './CodePanel/Code';\r\nimport Tabs from './Tabs';\r\nimport './CodePanel/Style.scss';\r\n\r\ninterface CodePanelProps {\r\n  lang: {\r\n    [name: string]: string\r\n  },\r\n  onInput?: (text: string) => void\r\n}\r\n\r\nexport default function CodePanel({ lang, onInput = () => {} }: CodePanelProps) {\r\n  return (\r\n    <div className=\"panel language-markup\">\r\n      <Tabs tabs={Object.keys(lang)}>\r\n        {Object.entries(lang).map(\r\n          (entry, key) => <Code content={entry[1]} key={key} onInput={onInput} />\r\n        )}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};","export default function removeIndentation(text: string) {\r\n  const lines = text.split(/\\r|\\n/);\r\n  lines.pop();\r\n  lines.shift();\r\n\r\n  const indentation = lines[0].match(/^\\s+/g) || [];\r\n\r\n  return (indentation\r\n    ? lines.map((line) => line.replace(indentation[0], ''))\r\n    : lines\r\n  ).join('\\r\\n');\r\n};","import React, { useEffect, useRef } from \"react\";\r\nimport{ Link } from \"react-router-dom\";\r\nimport M from 'materialize-css';\r\nimport './Tabs/Style.scss';\r\n\r\ninterface TabsProps {\r\n  children: React.ReactNode;\r\n  tabs: string[];\r\n}\r\n\r\nexport default function Tabs({ children, tabs }: TabsProps) {\r\n\r\n  const elRef = useRef<HTMLUListElement>(null);\r\n\r\n  useEffect(() => {\r\n    const tabs = M.Tabs.init(elRef.current as Element, {});\r\n    return () => tabs.destroy();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"tabs\" ref={elRef}>\r\n        {tabs.map((title, key) => \r\n          <li className=\"tab\" key={key}>\r\n            <Link to={\"#\" + title}>\r\n              {title}\r\n            </Link>\r\n          </li>\r\n        )}\r\n      </ul>\r\n      {React.Children.toArray(children).map((child, key) => \r\n        <div\r\n        className=\"flex-column\"\r\n        id={tabs[key]}\r\n        key={key}>\r\n          {child}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};","\r\nimport { useEffect } from 'react';\r\nimport removeIndentation from './removeIndentation';\r\nimport useToast from '../../Hooks/useToast';\r\n\r\ninterface CodeProps {\r\n  content: string,\r\n  onInput?: (text: string) => void\r\n}\r\n\r\nexport default function Code({ content, onInput = () => {} }: CodeProps) {\r\n\r\n  const\r\n  code = removeIndentation(content),\r\n  toast = useToast();\r\n\r\n  useEffect(() => onInput(code), [onInput, code]);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n      className=\"reset\"\r\n      onClick={e => {\r\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\r\n        navigator.clipboard.writeText(text)\r\n        .then(() => toast('copied to clipboard'))\r\n        .catch(() => toast('copy to clipboard failed'));       \r\n      }}>\r\n        Copy to Clipboard\r\n      </button>\r\n      <pre>\r\n        <code\r\n        contentEditable\r\n        spellCheck=\"false\"\r\n        suppressContentEditableWarning={true}\r\n        onInput={e => {\r\n          const el = e.target as HTMLElement;\r\n          onInput(el.textContent as string);\r\n        }}>\r\n          {code}\r\n        </code>\r\n      </pre>\r\n    </>\r\n  );\r\n};","import CodePanel from '../../Components/CodePanel';\r\n\r\nexport default function P11() {\r\n  return (\r\n    <>\r\n      <section className=\"accent-bottom panel\">\r\n        <h2>Largest product in a grid</h2>\r\n        <h4>Problem 11</h4>\r\n        <p>\r\n          In the 20×20 grid below, four numbers along a diagonal line have been\r\n          marked in red.\r\n        </p>\r\n        <div className=\"center font-mono nowrap\">\r\n          08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\r\n          <br />\r\n          49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\r\n          <br />\r\n          81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\r\n          <br />\r\n          52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\r\n          <br />\r\n          22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\r\n          <br />\r\n          24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\r\n          <br />\r\n          32 98 81 28 64 23 67 10 <span className=\"red-text\">26</span> 38 40 67 59 54 70 66 18 38 64 70\r\n          <br />\r\n          67 26 20 68 02 62 12 20 95 <span className=\"red-text\">63</span> 94 39 63 08 40 91 66 49 94 21\r\n          <br />\r\n          24 55 58 05 66 73 99 26 97 17 <span className=\"red-text\">78</span> 78 96 83 14 88 34 89 63 72\r\n          <br />\r\n          21 36 23 09 75 00 76 44 20 45 35 <span className=\"red-text\">14</span> 00 61 33 97 34 31 33 95\r\n          <br />\r\n          78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\r\n          <br />\r\n          16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\r\n          <br />\r\n          86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\r\n          <br />\r\n          19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\r\n          <br />\r\n          04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\r\n          <br />\r\n          88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\r\n          <br />\r\n          04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\r\n          <br />\r\n          20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\r\n          <br />\r\n          20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\r\n          <br />\r\n          01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\r\n        </div>\r\n        <p>The product of these numbers is 26 × 63 × 78 × 14 = 1788696.</p>\r\n        <p>\r\n          What is the greatest product of four adjacent numbers in the same\r\n          direction (up, down, left, right, or diagonally) in the 20×20 grid?\r\n        </p>\r\n      </section>\r\n      {/* prettier-ignore */}\r\n      <CodePanel lang={{\r\n        JavaScript: `\r\n          () => {\r\n            const d = [\r\n              [8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],\r\n              [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],\r\n              [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],\r\n              [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],\r\n              [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],\r\n              [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],\r\n              [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],\r\n              [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],\r\n              [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],\r\n              [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],\r\n              [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],\r\n              [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],\r\n              [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],\r\n              [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],\r\n              [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],\r\n              [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],\r\n              [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],\r\n              [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],\r\n              [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],\r\n              [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]\r\n            ];\r\n\r\n            let\r\n            p = 0,\r\n            f = (n1, n2, n3, n4) => {\r\n              let n = n1 * n2 * n3 * n4;\r\n              if (p < n) {\r\n                p = n;\r\n              }\r\n            };\r\n\r\n            for (let x = 3; x < 20 - 3; x++) {\r\n              for (let y = 3; y < 20 - 3; y++) {\r\n                f(d[x][y], d[x][y - 1], d[x][y - 2], d[x][y - 3]);\r\n                f(d[x][y], d[x][y + 1], d[x][y + 2], d[x][y + 3]);\r\n                f(d[x][y], d[x - 1][y], d[x - 2][y], d[x - 3][y]);\r\n                f(d[x][y], d[x + 1][y], d[x + 2][y], d[x + 3][y]);\r\n                f(d[x][y], d[x - 1][y - 1], d[x - 2][y - 2], d[x - 3][y - 3]);\r\n                f(d[x][y], d[x + 1][y + 1], d[x + 2][y + 2], d[x + 3][y + 3]);\r\n                f(d[x][y], d[x + 1][y - 1], d[x + 2][y - 2], d[x + 3][y - 3]);\r\n                f(d[x][y], d[x - 1][y + 1], d[x - 2][y + 2], d[x - 3][y + 3]);\r\n              }\r\n            }\r\n            return p;\r\n          }\r\n        `,\r\n        Python: `\r\n          grid = [\r\n            [8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],\r\n            [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],\r\n            [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],\r\n            [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],\r\n            [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],\r\n            [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],\r\n            [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],\r\n            [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],\r\n            [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],\r\n            [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],\r\n            [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],\r\n            [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],\r\n            [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],\r\n            [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],\r\n            [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],\r\n            [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],\r\n            [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],\r\n            [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],\r\n            [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],\r\n            [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]\r\n          ];\r\n          size = 20\r\n          nums = 4\r\n          prods = []\r\n          \r\n          def traverse(i_v, j_v):\r\n            prod = 1\r\n            for k in range(0, nums):\r\n              prod *= grid[i1 + i_v * k][j1 + j_v  * k]\r\n            prods.append(prod)\r\n          \r\n          for i1 in range(0, size):\r\n            for j1 in range(0, size):\r\n          \r\n              if j1 < size - nums:\r\n                traverse(0, 1)\r\n          \r\n              if i1 < size - nums:\r\n                traverse(1, 0)\r\n          \r\n                if j1 < size - nums:\r\n                  traverse(1, 1)\r\n          \r\n                if j1 >= nums:\r\n                  traverse(1, -1)\r\n          \r\n          print(max(prods))\r\n      `}} />\r\n    </>\r\n  );\r\n};"],"sourceRoot":""}