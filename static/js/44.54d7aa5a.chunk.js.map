{"version":3,"sources":["Snippets/Typescript.tsx","Components/CodePanel/removeIndentation.ts","Components/Tabs.tsx","Components/CodePanel/Code.tsx","Hooks/useHighlight.ts","Components/CodePanel.tsx","Hooks/useToast.ts"],"names":["Typescript","className","href","indent","lang","Bash","TypeScript","removeIndentation","text","lines","split","pop","shift","indentation","match","map","line","replace","join","Tabs","children","tabs","elRef","useRef","useEffect","M","init","current","destroy","ref","title","key","to","React","Children","toArray","child","id","Code","onInput","toast","useToast","code","Object","values","onClick","e","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","keys","toLowerCase","spellCheck","suppressContentEditableWarning","el","target","useHighlight","link","script","window","hljs","document","createElement","rel","src","onload","highlightAll","body","appendChild","removeChild","CodePanel","entries","entry","useState","message","setMessage","completeCallback","displayLength","html","Toast","dismissAll"],"mappings":"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","file":"static/js/44.54d7aa5a.chunk.js","sourcesContent":["import CodePanel from '../Components/CodePanel';\r\n\r\nexport default function Typescript() {\r\n  return (\r\n    <>\r\n      <section className=\"panel\">\r\n        <h2>A Guide to Typescript</h2>\r\n        <h4>Getting Started</h4>\r\n        <p>\r\n          This guide will outline how to port your existing CRA application from\r\n          ES to Typescript. If you are using CRA like I do, you can safely follow\r\n          the offial documentation here:\r\n        </p>\r\n        <a href=\"https://create-react-app.dev/docs/adding-typescript/\">\r\n          https://create-react-app.dev/docs/adding-typescript/\r\n        </a>\r\n        <p>\r\n          Or simply stick to this guide and do it the minimalist and lazy way.\r\n        </p>\r\n      </section>\r\n      <CodePanel\r\n      indent={false}\r\n      lang={{\r\n        Bash: `\r\n        npm i -D @types/node @types/react @types/react-dom @types/react-router\r\n        @types/react-router-dom typescript\r\n      `}} />\r\n      <section className=\"panel\">\r\n        <p>\r\n          Next rename all your file extensions in the src subdirectory: .js to .ts\r\n          and .jsx to .tsx.\r\n        </p>\r\n      </section>\r\n      <section className=\"panel\">\r\n        <h4>Troubleshooting</h4>\r\n        <p>\r\n          Now it is time to fix missing types. As usual, your best approach is\r\n          Google. Search for the types of your 3rd party dependencies which are\r\n          usually hosted on npm. Another good resource is DefinitelyTyped on\r\n          github. If you cannot find the right @types for the 3rd party library,\r\n          open up your project directory. Inside src you will find a file named\r\n          react-app-env. Declare every library without types here:\r\n        </p>\r\n      </section>\r\n      <CodePanel\r\n      indent={false}\r\n      lang={{\r\n        TypeScript: `\r\n          declare module 'libraryname';\r\n      `}} />\r\n      <section className=\"panel\">\r\n        <p>\r\n          If you have a bunch components that you do not want to translate from ES\r\n          to Typescript straight away, you can add them onto the exclude array.\r\n          This will allow you to start fresh and not worrying about old code. ES\r\n          code will work without porting, since it is a subset of Typescript. To\r\n          ignore your newly renamed files from src, open up tsconfig.json and\r\n          create an exclude array. Add any file to the array that you do not want\r\n          to rewrite straight away.\r\n        </p>\r\n      </section>\r\n      {/* prettier-ignore */}\r\n      <CodePanel\r\n      indent={false}\r\n      lang={{\r\n        'tsconfig.json': `\r\n        \"exclude\": [\r\n          \"src/App.tsx\",\r\n          \"src/Router.tsx\",\r\n          \"src/index.tsx\"\r\n        ],\r\n        \"include\": [\r\n          \"src\"\r\n        ]\r\n      `}} />\r\n      <h2>Shallow Dive into Types</h2>\r\n      {/* prettier-ignore */}\r\n      <CodePanel\r\n      indent={false}\r\n      lang={{\r\n        TypeScript: `\r\n        //explicite type declaration\r\n        let a: number;\r\n\r\n        //implicite type declaration\r\n        let b = 5;\r\n\r\n        //implicite any\r\n        let c;\r\n      `}} />\r\n      <section className=\"panel\">\r\n      <h2>Basic Types</h2>\r\n      <table className=\"highlight responsive-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Type</th>\r\n            <th>Code</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Boolean</td>\r\n            <td>: bool</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Number</td>\r\n            <td>: number</td>\r\n          </tr>\r\n          <tr>\r\n            <td>String</td>\r\n            <td>: string</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Array</td>\r\n            <td>: string[] or : number[]</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Tuple</td>\r\n            <td>: [bool, number, string]</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Enum</td>\r\n            <td>enum Color &#123; Red, Blue = 4 &#125;</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Any</td>\r\n            <td>: any</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Void</td>\r\n            <td>: void</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Null</td>\r\n            <td>: null</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Undefined</td>\r\n            <td>: undefined</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Never</td>\r\n            <td>: never</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Object</td>\r\n            <td>&#123; key1: bool, key2?: any &#125;</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      </section>\r\n      <h2>Union Types</h2>\r\n      <CodePanel\r\n      indent={false}\r\n      lang={{\r\n        TypeScript: `\r\n        let a: number | boolean | null;\r\n      `}} />\r\n      <h2>Optional Parameters</h2>\r\n      <h2>Interfaces</h2>\r\n      <CodePanel\r\n      indent={false}\r\n      lang={{\r\n        TypeScript: `\r\n        interface Person {\r\n          firstName: string,\r\n          lastName: string\r\n        }\r\n      `}} />\r\n      <h2>setter getter</h2>\r\n    </>\r\n  );\r\n};","export default function removeIndentation(text: string) {\r\n  const lines = text.split(/\\r|\\n/);\r\n  lines.pop();\r\n  lines.shift();\r\n\r\n  const indentation = lines[0].match(/^\\s+/g) || [];\r\n\r\n  return (indentation\r\n    ? lines.map((line) => line.replace(indentation[0], ''))\r\n    : lines\r\n  ).join('\\r\\n');\r\n};","import React, { useEffect, useRef } from \"react\";\r\nimport{ Link } from \"react-router-dom\";\r\nimport M from 'materialize-css';\r\nimport './Tabs/Style.scss';\r\n\r\ninterface TabsProps {\r\n  children: React.ReactNode;\r\n  tabs: string[];\r\n}\r\n\r\nexport default function Tabs({ children, tabs }: TabsProps) {\r\n\r\n  const elRef = useRef<HTMLUListElement>(null);\r\n\r\n  useEffect(() => {\r\n    const tabs = M.Tabs.init(elRef.current as Element, {});\r\n    return () => tabs.destroy();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"tabs\" ref={elRef}>\r\n        {tabs.map((title, key) => \r\n          <li className=\"tab\" key={key}>\r\n            <Link to={\"#\" + title}>\r\n              {title}\r\n            </Link>\r\n          </li>\r\n        )}\r\n      </ul>\r\n      {React.Children.toArray(children).map((child, key) => \r\n        <div\r\n        className=\"flex-column\"\r\n        id={tabs[key]}\r\n        key={key}>\r\n          {child}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};","\r\nimport { useEffect } from 'react';\r\nimport removeIndentation from './removeIndentation';\r\nimport useToast from '../../Hooks/useToast';\r\nimport { CodeProps } from './CodeProps';\r\n\r\nexport default function Code({ indent = true, lang, onInput = () => {} }: CodeProps) {\r\n  \r\n  const toast = useToast();\r\n  let code = Object.values(lang)[0];\r\n\r\n  if (!indent) {\r\n    code = removeIndentation(code)\r\n  }\r\n\r\n  useEffect(() => onInput(code), [onInput, code]);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n      className=\"reset\"\r\n      onClick={e => {\r\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\r\n        navigator.clipboard.writeText(text)\r\n        .then(() => toast('copied to clipboard'))\r\n        .catch(() => toast('copy to clipboard failed'));       \r\n      }}>\r\n        Copy to Clipboard\r\n      </button>\r\n      <pre>\r\n        <code\r\n        contentEditable\r\n        className={\"hljs language-\" + Object.keys(lang)[0].toLowerCase()}\r\n        spellCheck=\"false\"\r\n        suppressContentEditableWarning={true}\r\n        onInput={e => {\r\n          const el = e.target as HTMLElement;\r\n          onInput(el.textContent as string);\r\n        }}>\r\n          {code}\r\n        </code>\r\n      </pre>\r\n    </>\r\n  );\r\n};","import { useEffect } from 'react';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    hljs: any;\r\n  }\r\n}\r\n\r\nexport default function useHighlight() {\r\n  \r\n  useEffect(() => {\r\n\r\n    let\r\n    link: any,\r\n    script: any;\r\n\r\n    if (!window.hljs) {\r\n      window.hljs = true;\r\n\r\n      link = document.createElement('link');\r\n      link.rel = 'stylesheet';\r\n      link.href = 'https://unpkg.com/@highlightjs/cdn-assets@11.1.0/styles/default.min.css';\r\n\r\n      script = document.createElement('script');\r\n      script.src = 'https://unpkg.com/@highlightjs/cdn-assets@11.1.0/highlight.min.js';\r\n      script.onload = () => window.hljs.highlightAll();\r\n    \r\n      document.body.appendChild(link);\r\n      document.body.appendChild(script);\r\n    }\r\n    \r\n    return () => {\r\n      typeof link === 'object' && document.body.removeChild(link);\r\n      typeof script === 'object' && document.body.removeChild(script);\r\n      delete window.hljs;\r\n    }\r\n  }, []);\r\n}","import Code from './CodePanel/Code';\r\nimport Tabs from './Tabs';\r\nimport './CodePanel/Style.scss';\r\nimport { CodeProps } from './CodePanel/CodeProps';\r\nimport useHighlight from '../Hooks/useHighlight';\r\n\r\nexport default function CodePanel({ lang, indent = true, onInput = () => {} }: CodeProps) {\r\n\r\n  useHighlight();\r\n\r\n  return (\r\n    <div className=\"panel language-markup\">\r\n      <Tabs tabs={Object.keys(lang)}>\r\n        {Object.entries(lang).map(\r\n          (entry, key) => <Code indent={indent} key={key} lang={{[entry[0]]: entry[1]}} onInput={onInput} />\r\n        )}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};","import { useEffect, useState } from \"react\";\r\nimport M from 'materialize-css';\r\nimport './useToast/Style.scss';\r\n\r\nexport default function useToast() {\r\n\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    message && M.toast({\r\n      completeCallback: () => setMessage(''),\r\n      displayLength: 2000,\r\n      html: message\r\n    });\r\n    return () => M.Toast.dismissAll();\r\n  }, [message]);\r\n\r\n  return setMessage;\r\n};"],"sourceRoot":""}