(this.webpackJsonppages=this.webpackJsonppages||[]).push([[2,39,47,54,69,72],{155:function(e,t,n){},156:function(e,t,n){},75:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),c=n(77),l=n(76);n(156);t.default=r.a.memo((function(e){var t=e.children,n=e.onInput,u=void 0===n?function(){}:n,o=e.title,i=Object(c.default)(t),s=Object(l.default)();return Object(a.useEffect)((function(){return u(i)}),[u,i]),r.a.createElement("div",{className:"panel language-markup"},r.a.createElement("h3",null,o),r.a.createElement("button",{className:"reset",onClick:function(e){var t=e.currentTarget.parentNode.querySelector("code").textContent;navigator.clipboard.writeText(t).then((function(){return s("copied to clipboard")})).catch((function(){return s("copy to clipboard failed")}))}},"Copy to Clipboard"),r.a.createElement("pre",null,r.a.createElement("code",{contentEditable:!0,spellCheck:"false",suppressContentEditableWarning:!0,onInput:function(e){var t=e.target;u(t.textContent)}},i)))}))},76:function(e,t,n){"use strict";n.r(t);var a=n(14),r=n(0),c=n(55),l=n.n(c);n(155);t.default=function(){var e=Object(r.useState)(""),t=Object(a.a)(e,2),n=t[0],c=t[1];return Object(r.useEffect)((function(){return n&&l.a.toast({completeCallback:function(){return c("")},html:n}),function(){return l.a.Toast.dismissAll()}}),[n]),c}},77:function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=e.split(/\r|\n/);t.pop(),t.shift();var n=t[0].match(/^\s+/g)||[];return(n?t.map((function(e){return e.replace(n[0],"")})):t).join("\r\n")}},81:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),c=n(75);t.default=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("section",{className:"accent-bottom panel"},r.a.createElement("h2",null,"Summation of primes"),r.a.createElement("h4",null,"Problem 10"),r.a.createElement("p",null,"The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17."),r.a.createElement("p",null,"Find the sum of all the primes below two million.")),r.a.createElement(c.default,{title:"JavaScript"},"\n        m => {\n          let\n          a = Array(m + 1).fill(true),\n          p = [];\n          \n          a[0] = a[1] = false;\n          a.map((v, k) => {\n            if (v) {\n              p.push(k);\n              for (let i = k * k; i <= m; i += k) {\n                a[i] = false;\n              }\n            }\n          });\n\n          return p.reduce((acc, n) => acc + n);\n        }\n    "))}}}]);
//# sourceMappingURL=2.da5fb50f.chunk.js.map