{"version":3,"sources":["Projects/TicTacToe.tsx"],"names":["Square","onClick","value","className","Board","squares","renderSquare","i","calculateWinner","lines","length","a","b","c","useState","Array","fill","history","setHistory","nextIs","setIsNext","stepNumber","setStepNumber","current","winner","moves","map","step","move","desc","key","jumpTo","status","id","slice","concat","handleClick"],"mappings":"kIAGMA,G,OAAS,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACzB,OACE,4BAAQC,UAAU,SAASF,QAASA,GACjCC,KAKDE,EAAQ,SAAC,GAA0B,IAAxBH,EAAuB,EAAvBA,QAASI,EAAc,EAAdA,QACxB,SAASC,EAAaC,GACpB,OAAO,kBAACP,EAAD,CAAQE,MAAOG,EAAQE,GAAIN,QAAS,kBAAMA,EAAQM,MAG3D,OACE,oCACE,yBAAKJ,UAAU,aACZG,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKH,UAAU,aACZG,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKH,UAAU,aACZG,EAAa,GACbA,EAAa,GACbA,EAAa,MAoEtB,SAASE,EAAgBH,GAWvB,IAVA,IAAMI,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAF,EAAI,EAAGA,EAAIE,EAAMC,OAAQH,IAAK,CAAC,IAAD,cACnBE,EAAMF,GADa,GAC9BI,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIR,EAAQM,IAAMN,EAAQM,KAAON,EAAQO,IAAMP,EAAQM,KAAON,EAAQQ,GACpE,OAAOR,EAAQM,GAGnB,OAAO,KA/EM,qBAAO,IAAD,EAEWG,mBAAS,CAAC,CAAET,QAASU,MAAM,GAAGC,KAAK,SAF9C,mBAEZC,EAFY,KAEHC,EAFG,OAGSJ,mBAAS,KAHlB,mBAGZK,EAHY,KAGJC,EAHI,OAIiBN,mBAAS,GAJ1B,mBAIZO,EAJY,KAIAC,EAJA,KAgCnB,IAAMC,EAAUN,EAAQI,GAClBG,EAAShB,EAAgBe,EAAQlB,SAEjCoB,EAAQR,EAAQS,KAAI,SAACC,EAAMC,GAC/B,IAAMC,EAAOD,EAAO,eAAiBA,EAAO,mBAE5C,OACE,wBAAIE,IAAKF,GACP,4BAAQ3B,QAAS,kBAbvB,SAAgB0B,GACdP,EAAUO,EAAO,IAAM,EAAI,IAAM,KACjCL,EAAcK,GAWaI,CAAOH,KAAQC,OAKtCG,EAASR,EAAS,WAAaA,EAAS,gBAAkBL,EAEhE,OACE,yBACAhB,UAAU,0BACV8B,GAAG,aACD,yBAAK9B,UAAU,cACb,kBAACC,EAAD,CAAOH,QAAS,SAACM,GAAD,OA9CtB,SAAqBA,GACnB,IAAM2B,EAAQjB,EAAQiB,MAAM,EAAGb,EAAa,GAEtChB,EADU6B,EAAMA,EAAMxB,OAAS,GACbL,QAAQ6B,QAE5B1B,EAAgBH,IAAYA,EAAQE,KAExCF,EAAQE,GAAKY,EAEbD,EACEgB,EAAMC,OAAO,CACX,CACE9B,QAASA,MAKfe,EAAqB,MAAXD,EAAiB,IAAM,KACjCG,EAAcY,EAAMxB,SA4BO0B,CAAY7B,IAAIF,QAASkB,EAAQlB,WAE1D,yBAAKF,UAAU,aACb,yBAAKA,UAAU,UAAU6B,GACzB,4BAAKP,O","file":"static/js/49.3772e8b9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TicTacToe/Style.scss';\n\nconst Square = ({ onClick, value }) => {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n};\n\nconst Board = ({ onClick, squares }) => {\n  function renderSquare(i) {\n    return <Square value={squares[i]} onClick={() => onClick(i)} />;\n  }\n\n  return (\n    <>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </>\n  );\n};\n\nexport default () => {\n\n  const [history, setHistory] = useState([{ squares: Array(9).fill(null) }]);\n  const [nextIs, setIsNext] = useState('X');\n  const [stepNumber, setStepNumber] = useState(0);\n\n  function handleClick(i) {\n    const slice = history.slice(0, stepNumber + 1);\n    const current = slice[slice.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) return;\n\n    squares[i] = nextIs;\n\n    setHistory(\n      slice.concat([\n        {\n          squares: squares,\n        },\n      ])\n    );\n\n    setIsNext(nextIs === 'X' ? 'O' : 'X');\n    setStepNumber(slice.length);\n  }\n\n  function jumpTo(step) {\n    setIsNext(step % 2 === 0 ? 'X' : 'O');\n    setStepNumber(step);\n  }\n\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n\n  const moves = history.map((step, move) => {\n    const desc = move ? 'Go to move #' + move : 'Go to game start';\n\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{desc}</button>\n      </li>\n    );\n  });\n\n  const status = winner ? 'Winner: ' + winner : 'Next player: ' + nextIs;\n\n  return (\n    <div\n    className=\"center-content flex-row\"\n    id=\"TicTacToe\">\n      <div className=\"game-board\">\n        <Board onClick={(i) => handleClick(i)} squares={current.squares} />\n      </div>\n      <div className=\"game-info\">\n        <div className=\"status\">{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n};\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}"],"sourceRoot":""}