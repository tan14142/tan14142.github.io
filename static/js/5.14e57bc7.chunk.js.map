{"version":3,"sources":["Hooks/useToast.ts","Components/CodePanel.tsx","Components/CodePanel/removeIndentation.ts","Components/Tabs.tsx","Components/CodePanel/Code.tsx","Projects/ProjectEuler/P12.tsx"],"names":["useToast","useState","message","setMessage","useEffect","M","toast","completeCallback","displayLength","html","Toast","dismissAll","CodePanel","lang","onInput","className","tabs","Object","keys","entries","map","entry","key","content","removeIndentation","text","lines","split","pop","shift","indentation","match","line","replace","join","Tabs","children","elRef","useRef","init","current","destroy","ref","title","to","React","Children","toArray","child","id","Code","code","onClick","e","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","P12","style","lineHeight","width","JavaScript"],"mappings":"mRAIe,SAASA,IAEtB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATAC,qBAAU,WAMR,OALAF,GAAWG,IAAEC,MAAM,CACjBC,iBAAkB,kBAAMJ,EAAW,KACnCK,cAAe,IACfC,KAAMP,IAED,kBAAMG,IAAEK,MAAMC,gBACpB,CAACT,IAEGC,I,gCCjBT,mFAWe,SAASS,EAAT,GAAkE,IAA7CC,EAA4C,EAA5CA,KAA4C,IAAtCC,eAAsC,MAA5B,aAA4B,EAC9E,OACE,qBAAKC,UAAU,wBAAf,SACE,cAAC,UAAD,CAAMC,KAAMC,OAAOC,KAAKL,GAAxB,SACGI,OAAOE,QAAQN,GAAMO,KACpB,SAACC,EAAOC,GAAR,OAAgB,cAAC,UAAD,CAAMC,QAASF,EAAM,GAAcP,QAASA,GAAdQ,Y,gCChBzC,SAASE,EAAkBC,GACxC,IAAMC,EAAQD,EAAKE,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMN,KAAI,SAACY,GAAD,OAAUA,EAAKC,QAAQH,EAAY,GAAI,OACjDJ,GACFQ,KAAK,QAVT,gD,gCCAA,2GAUe,SAASC,EAAT,GAA8C,IAA9BC,EAA6B,EAA7BA,SAAUpB,EAAmB,EAAnBA,KAEjCqB,EAAQC,iBAAyB,MAOvC,OALAlC,qBAAU,WACR,IAAMY,EAAOX,IAAE8B,KAAKI,KAAKF,EAAMG,QAAoB,IACnD,OAAO,kBAAMxB,EAAKyB,aACjB,IAGD,qCACE,oBAAI1B,UAAU,OAAO2B,IAAKL,EAA1B,SACGrB,EAAKI,KAAI,SAACuB,EAAOrB,GAAR,OACR,oBAAIP,UAAU,MAAd,SACE,cAAC,IAAD,CAAM6B,GAAI,IAAMD,EAAhB,SACGA,KAFoBrB,QAO5BuB,IAAMC,SAASC,QAAQX,GAAUhB,KAAI,SAAC4B,EAAO1B,GAAR,OACpC,qBACAP,UAAU,cACVkC,GAAIjC,EAAKM,GAFT,SAIG0B,GADE1B,W,gCCjCb,iFASe,SAAS4B,EAAT,GAA2D,IAA3C3B,EAA0C,EAA1CA,QAA0C,IAAjCT,eAAiC,MAAvB,aAAuB,EAGvEqC,EAAO3B,kBAAkBD,GACzBjB,EAAQN,oBAIR,OAFAI,qBAAU,kBAAMU,EAAQqC,KAAO,CAACrC,EAASqC,IAGvC,qCACE,wBACApC,UAAU,QACVqC,QAAS,SAAAC,GACP,IAAM5B,EAAO4B,EAAEC,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAUnC,GAC7BoC,MAAK,kBAAMvD,EAAM,0BACjBwD,OAAM,kBAAMxD,EAAM,gCANrB,+BAUA,8BACE,sBACAyD,iBAAe,EACfC,WAAW,QACXC,gCAAgC,EAChCnD,QAAS,SAAAuC,GACP,IAAMa,EAAKb,EAAEc,OACbrD,EAAQoD,EAAGT,cANb,SAQGN,W,gCCvCX,kEAEe,SAASiB,IACtB,OACE,qCACE,0BAASrD,UAAU,sBAAnB,UACE,oEACA,4CACA,+MAKA,qBAAKA,UAAU,SAAf,sDACA,6FACA,uBAAOA,UAAU,4CAA4CsD,MAAO,CAClEC,WAAa,OACbC,MAAO,SAFT,SAIE,kCACE,+BACE,oCACA,sCAEF,+BACE,oCACA,yCAEF,+BACE,oCACA,+CAEF,+BACE,qCACA,gDAEF,+BACE,qCACA,gDAEF,+BACE,qCACA,gDAEF,+BACE,qCACA,4DAIN,4GAIA,sHAMF,cAAC,UAAD,CAAW1D,KAAM,CACf2D,WAAW","file":"static/js/5.14e57bc7.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport M from 'materialize-css';\r\nimport './useToast/Style.scss';\r\n\r\nexport default function useToast() {\r\n\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    message && M.toast({\r\n      completeCallback: () => setMessage(''),\r\n      displayLength: 2000,\r\n      html: message\r\n    });\r\n    return () => M.Toast.dismissAll();\r\n  }, [message]);\r\n\r\n  return setMessage;\r\n};","import Code from './CodePanel/Code';\r\nimport Tabs from './Tabs';\r\nimport './CodePanel/Style.scss';\r\n\r\ninterface CodePanelProps {\r\n  lang: {\r\n    [name: string]: string\r\n  },\r\n  onInput?: (text: string) => void\r\n}\r\n\r\nexport default function CodePanel({ lang, onInput = () => {} }: CodePanelProps) {\r\n  return (\r\n    <div className=\"panel language-markup\">\r\n      <Tabs tabs={Object.keys(lang)}>\r\n        {Object.entries(lang).map(\r\n          (entry, key) => <Code content={entry[1]} key={key} onInput={onInput} />\r\n        )}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};","export default function removeIndentation(text: string) {\r\n  const lines = text.split(/\\r|\\n/);\r\n  lines.pop();\r\n  lines.shift();\r\n\r\n  const indentation = lines[0].match(/^\\s+/g) || [];\r\n\r\n  return (indentation\r\n    ? lines.map((line) => line.replace(indentation[0], ''))\r\n    : lines\r\n  ).join('\\r\\n');\r\n};","import React, { useEffect, useRef } from \"react\";\r\nimport{ Link } from \"react-router-dom\";\r\nimport M from 'materialize-css';\r\nimport './Tabs/Style.scss';\r\n\r\ninterface TabsProps {\r\n  children: React.ReactNode;\r\n  tabs: string[];\r\n}\r\n\r\nexport default function Tabs({ children, tabs }: TabsProps) {\r\n\r\n  const elRef = useRef<HTMLUListElement>(null);\r\n\r\n  useEffect(() => {\r\n    const tabs = M.Tabs.init(elRef.current as Element, {});\r\n    return () => tabs.destroy();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"tabs\" ref={elRef}>\r\n        {tabs.map((title, key) => \r\n          <li className=\"tab\" key={key}>\r\n            <Link to={\"#\" + title}>\r\n              {title}\r\n            </Link>\r\n          </li>\r\n        )}\r\n      </ul>\r\n      {React.Children.toArray(children).map((child, key) => \r\n        <div\r\n        className=\"flex-column\"\r\n        id={tabs[key]}\r\n        key={key}>\r\n          {child}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};","\r\nimport { useEffect } from 'react';\r\nimport removeIndentation from './removeIndentation';\r\nimport useToast from '../../Hooks/useToast';\r\n\r\ninterface CodeProps {\r\n  content: string,\r\n  onInput?: (text: string) => void\r\n}\r\n\r\nexport default function Code({ content, onInput = () => {} }: CodeProps) {\r\n\r\n  const\r\n  code = removeIndentation(content),\r\n  toast = useToast();\r\n\r\n  useEffect(() => onInput(code), [onInput, code]);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n      className=\"reset\"\r\n      onClick={e => {\r\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\r\n        navigator.clipboard.writeText(text)\r\n        .then(() => toast('copied to clipboard'))\r\n        .catch(() => toast('copy to clipboard failed'));       \r\n      }}>\r\n        Copy to Clipboard\r\n      </button>\r\n      <pre>\r\n        <code\r\n        contentEditable\r\n        spellCheck=\"false\"\r\n        suppressContentEditableWarning={true}\r\n        onInput={e => {\r\n          const el = e.target as HTMLElement;\r\n          onInput(el.textContent as string);\r\n        }}>\r\n          {code}\r\n        </code>\r\n      </pre>\r\n    </>\r\n  );\r\n};","import CodePanel from '../../Components/CodePanel';\r\n\r\nexport default function P12() {\r\n  return (\r\n    <>\r\n      <section className=\"accent-bottom panel\">\r\n        <h2>Highly divisible triangular number</h2>\r\n        <h4>Problem 12</h4>\r\n        <p>\r\n          The sequence of triangle numbers is generated by adding the natural\r\n          numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =\r\n          28. The first ten terms would be:\r\n        </p>\r\n        <div className=\"center\">1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</div>\r\n        <p>Let us list the factors of the first seven triangle numbers:</p>\r\n        <table className=\"concise-table container highlight striped\" style={{\r\n          lineHeight : '1rem',\r\n          width: '10rem'\r\n        }}>\r\n          <tbody>\r\n            <tr>\r\n              <td>1:</td>\r\n              <td>1</td>\r\n            </tr>\r\n            <tr>\r\n              <td>3:</td>\r\n              <td>1, 3</td>\r\n            </tr>\r\n            <tr>\r\n              <td>6:</td>\r\n              <td>1, 2, 3, 6</td>\r\n            </tr>\r\n            <tr>\r\n              <td>10:</td>\r\n              <td>1, 2, 5, 10</td>\r\n            </tr>\r\n            <tr>\r\n              <td>15:</td>\r\n              <td>1, 3, 5, 15</td>\r\n            </tr>\r\n            <tr>\r\n              <td>21:</td>\r\n              <td>1, 3, 7, 21</td>\r\n            </tr>\r\n            <tr>\r\n              <td>28:</td>\r\n              <td>1, 2, 4, 7, 14, 28</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <p>\r\n          We can see that 28 is the first triangle number to have over five\r\n          divisors.\r\n        </p>\r\n        <p>\r\n          What is the value of the first triangle number to have over five hundred\r\n          divisors?\r\n        </p>\r\n      </section>\r\n      {/* prettier-ignore */}\r\n      <CodePanel lang={{\r\n        JavaScript: `\r\n          m => {\r\n            let\r\n            primes = [],\r\n            tDividers = 1,\r\n            t1 = 1,\r\n            t2 = 1,\r\n\r\n            primeFactorization = n => {\r\n              \r\n              let dividers = 1;\r\n              \r\n              for (let key = 0; primes[key] <= n; key++) {\r\n                \r\n                let power = 1;\r\n                \r\n                while (n % primes[key] === 0) {\r\n                  n /= primes[key];\r\n                  power++;\r\n                }\r\n                dividers *= power;\r\n              }\r\n              return dividers;\r\n            };\r\n\r\n            const\r\n            list = Array(m * 4).fill(true);\r\n            list[0] = list[1] = false;\r\n            \r\n            list.map((v, k) => {\r\n              if (v) {\r\n                primes.push(k);\r\n                for (let key = k * k; key < list.length; key += k) {\r\n                  list[key] = false;\r\n                }\r\n              }\r\n            });\r\n\r\n            for (var counter = 2; tDividers <= m ; counter++) {\r\n              if (counter % 2) {\r\n                t1 = primeFactorization((counter + 1) / 2);\r\n              }\r\n              else {\r\n                t2 = primeFactorization(counter + 1);\r\n              }\r\n              tDividers = t1 * t2;\r\n            }\r\n            return counter * (counter - 1) / 2;\r\n          }\r\n      `}} />\r\n    </>\r\n  );\r\n};"],"sourceRoot":""}