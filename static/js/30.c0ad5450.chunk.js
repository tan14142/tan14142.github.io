(this.webpackJsonppages=this.webpackJsonppages||[]).push([[30,46,51,55,56,63,84,86,87],{110:function(t,n,e){"use strict";e.r(n),e.d(n,"default",(function(){return s}));var r=e(81),c=e(0);function s(){return Object(c.jsxs)(c.Fragment,{children:[Object(c.jsxs)("section",{className:"accent-bottom panel",children:[Object(c.jsx)("h2",{children:"Largest product in a series"}),Object(c.jsx)("h4",{children:"Problem 8"}),Object(c.jsx)("p",{children:"The four adjacent digits in the 1000-digit number that have the greatest product are 9 \xd7 9 \xd7 8 \xd7 9 = 5832."}),Object(c.jsxs)("div",{className:"center font-mono nowrap",children:["73167176531330624919225119674426574742355349194934",Object(c.jsx)("br",{}),"96983520312774506326239578318016984801869478851843",Object(c.jsx)("br",{}),"85861560789112949495459501737958331952853208805511",Object(c.jsx)("br",{}),"12540698747158523863050715693290963295227443043557",Object(c.jsx)("br",{}),"66896648950445244523161731856403098711121722383113",Object(c.jsx)("br",{}),"62229893423380308135336276614282806444486645238749",Object(c.jsx)("br",{}),"30358907296290491560440772390713810515859307960866",Object(c.jsx)("br",{}),"70172427121883998797908792274921901699720888093776",Object(c.jsx)("br",{}),"65727333001053367881220235421809751254540594752243",Object(c.jsx)("br",{}),"52584907711670556013604839586446706324415722155397",Object(c.jsx)("br",{}),"53697817977846174064955149290862569321978468622482",Object(c.jsx)("br",{}),"83972241375657056057490261407972968652414535100474",Object(c.jsx)("br",{}),"82166370484403199890008895243450658541227588666881",Object(c.jsx)("br",{}),"16427171479924442928230863465674813919123162824586",Object(c.jsx)("br",{}),"17866458359124566529476545682848912883142607690042",Object(c.jsx)("br",{}),"24219022671055626321111109370544217506941658960408",Object(c.jsx)("br",{}),"07198403850962455444362981230987879927244284909188",Object(c.jsx)("br",{}),"84580156166097919133875499200524063689912560717606",Object(c.jsx)("br",{}),"05886116467109405077541002256983155200055935729725",Object(c.jsx)("br",{}),"71636269561882670428252483600823257530420752963450"]}),Object(c.jsx)("p",{children:"Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?"})]}),Object(c.jsx)(r.default,{lang:{JavaScript:"\n          m => {\n            let\n            c = 0,\n            n = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450';\n            n = n.split('');\n\n            for (let i = 0; i < n.length - m; i++) {\n              \n              let s = 1;\n\n              for (let j = 0; j < m; j++) {\n                s *= n[i + j];\n              }\n              if (s > c) {\n                c = s;\n              }\n            }\n            return c;\n          }\n        ",Python:"\n          numbers = list(map(lambda n: int(n), list('7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450')))\n          prods = [1] * len(numbers)\n          target = 13\n          pos = 0\n\n          for i in range(0, len(numbers) - 13):\n            prod = 1\n            for j in range(i, i + target):\n              prod *= numbers[j]\n            if prod > max(prods):\n              pos = i\n            prods[i] = prod\n\n          print(numbers[pos: pos + target], prods[pos])\n      "}})]})}},174:function(t,n,e){},175:function(t,n,e){},176:function(t,n,e){},80:function(t,n,e){"use strict";e.r(n),e.d(n,"default",(function(){return a}));var r=e(16),c=e(1),s=e(59),i=e.n(s);e(174);function a(){var t=Object(c.useState)(""),n=Object(r.a)(t,2),e=n[0],s=n[1];return Object(c.useEffect)((function(){return e&&i.a.toast({completeCallback:function(){return s("")},displayLength:2e3,html:e}),function(){return i.a.Toast.dismissAll()}}),[e]),s}},81:function(t,n,e){"use strict";e.r(n),e.d(n,"default",(function(){return i}));var r=e(84),c=e(83),s=(e(176),e(0));function i(t){var n=t.lang,e=t.onInput,i=void 0===e?function(){}:e;return Object(s.jsx)("div",{className:"panel language-markup",children:Object(s.jsx)(c.default,{tabs:Object.keys(n),children:Object.entries(n).map((function(t,n){return Object(s.jsx)(r.default,{content:t[1],onInput:i},n)}))})})}},82:function(t,n,e){"use strict";function r(t){var n=t.split(/\r|\n/);n.pop(),n.shift();var e=n[0].match(/^\s+/g)||[];return(e?n.map((function(t){return t.replace(e[0],"")})):n).join("\r\n")}e.r(n),e.d(n,"default",(function(){return r}))},83:function(t,n,e){"use strict";e.r(n),e.d(n,"default",(function(){return o}));var r=e(1),c=e.n(r),s=e(6),i=e(59),a=e.n(i),u=(e(175),e(0));function o(t){var n=t.children,e=t.tabs,i=Object(r.useRef)(null);return Object(r.useEffect)((function(){var t=a.a.Tabs.init(i.current,{});return function(){return t.destroy()}}),[]),Object(u.jsxs)(u.Fragment,{children:[Object(u.jsx)("ul",{className:"tabs",ref:i,children:e.map((function(t,n){return Object(u.jsx)("li",{className:"tab",children:Object(u.jsx)(s.b,{to:"#"+t,children:t})},n)}))}),c.a.Children.toArray(n).map((function(t,n){return Object(u.jsx)("div",{className:"flex-column",id:e[n],children:t},n)}))]})}},84:function(t,n,e){"use strict";e.r(n),e.d(n,"default",(function(){return a}));var r=e(1),c=e(82),s=e(80),i=e(0);function a(t){var n=t.content,e=t.onInput,a=void 0===e?function(){}:e,u=Object(c.default)(n),o=Object(s.default)();return Object(r.useEffect)((function(){return a(u)}),[a,u]),Object(i.jsxs)(i.Fragment,{children:[Object(i.jsx)("button",{className:"reset",onClick:function(t){var n=t.currentTarget.parentNode.querySelector("code").textContent;navigator.clipboard.writeText(n).then((function(){return o("copied to clipboard")})).catch((function(){return o("copy to clipboard failed")}))},children:"Copy to Clipboard"}),Object(i.jsx)("pre",{children:Object(i.jsx)("code",{contentEditable:!0,spellCheck:"false",suppressContentEditableWarning:!0,onInput:function(t){var n=t.target;a(n.textContent)},children:u})})]})}}}]);
//# sourceMappingURL=30.c0ad5450.chunk.js.map