{"version":3,"sources":["Projects/ProjectEuler/P19.tsx","Components/CodePanel.tsx","Hooks/useToast.ts","Components/CodePanel/removeIndentation.ts"],"names":["className","style","marginLeft","title","React","memo","children","onInput","code","removeIndentation","toast","useToast","useEffect","onClick","e","text","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","useState","message","setMessage","M","completeCallback","html","Toast","dismissAll","lines","split","pop","shift","indentation","match","map","line","replace","join"],"mappings":"gHAAA,mCAGe,qBACb,OACE,oCACE,6BAASA,UAAU,uBACjB,gDACA,0CACA,4HAIA,wBACAA,UAAU,kBACVC,MAAO,CAAEC,WAAY,SACnB,wDACA,yDAEE,6BAFF,4BAIE,6BAJF,gCAME,6BANF,yBAQE,6BARF,yCAUE,6BAVF,mCAaA,0IAKF,yIAMF,kBAAC,UAAD,CAAWC,MAAM,cAAjB,iV,4ECzCN,kDAWeC,cAAMC,MAAK,YAA6D,IAA1DC,EAAyD,EAAzDA,SAAyD,IAA/CC,eAA+C,MAArC,aAAqC,EAA3BJ,EAA2B,EAA3BA,MAGzDK,EAAOC,kBAAkBH,GACzBI,EAAQC,oBAIR,OAFAC,qBAAU,kBAAML,EAAQC,KAAO,CAACD,EAASC,IAGvC,yBAAKR,UAAU,yBACb,4BAAKG,GACL,4BACAH,UAAU,QACVa,QAAS,SAAAC,GACP,IAAMC,EAAOD,EAAEE,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAUP,GAC7BQ,MAAK,kBAAMb,EAAM,0BACjBc,OAAM,kBAAMd,EAAM,iCANrB,qBAUA,6BACE,0BACAe,iBAAe,EACfC,WAAW,QACXC,gCAAgC,EAChCpB,QAAS,SAAAO,GACP,IAAMc,EAAKd,EAAEe,OACbtB,EAAQqB,EAAGT,eAEVX,S,kFCrCI,qBAAO,IAAD,EAEWsB,mBAAS,IAFpB,mBAEZC,EAFY,KAEHC,EAFG,KAYnB,OARApB,qBAAU,WAKR,OAJAmB,GAAWE,IAAEvB,MAAM,CACjBwB,iBAAkB,kBAAMF,EAAW,KACnCG,KAAMJ,IAED,kBAAME,IAAEG,MAAMC,gBACpB,CAACN,IAEGC,I,gCChBT,OAAe,mBAACjB,GACd,IAAMuB,EAAQvB,EAAKwB,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAAQJ,EAAY,GAAI,OACjDJ,GACFS,KAAK","file":"static/js/11.30288752.chunk.js","sourcesContent":["import React from 'react';\nimport CodePanel from '../../Components/CodePanel';\n\nexport default () => {\n  return (\n    <>\n      <section className=\"accent-bottom panel\">\n        <h2>Counting Sundays</h2>\n        <h4>Problem 19</h4>\n        <p>\n          You are given the following information, but you may prefer to do some\n          research for yourself.\n        </p>\n        <ul\n        className=\"browser-default\"\n        style={{ marginLeft: '1rem' }}>\n          <li>1 Jan 1900 was a Monday.</li>\n          <li>\n            Thirty days has September,\n            <br />\n            April, June and November.\n            <br />\n            All the rest have thirty-one,\n            <br />\n            Saving February alone,\n            <br />\n            Which has twenty-eight, rain or shine.\n            <br />\n            And on leap years, twenty-nine.\n          </li>\n          <li>\n            A leap year occurs on any year evenly divisible by 4,\n            but not on a century unless it is divisible by 400.\n          </li>\n        </ul>\n        <p>\n          How many Sundays fell on the first of the month during the twentieth\n          century (1 Jan 1901 to 31 Dec 2000)?\n        </p>\n      </section>\n      {/* prettier-ignore */}\n      <CodePanel title=\"JavaScript\">{`\n        () => {\n          let count = 0;\n          for (let year = 1901; year <= 2000; year++) {\n            for (let month = 0; month < 12; month++) {\n              if ((new Date(year, month)).getDay() === 0) {\n                count++;\n              }\n            }\n          }\n          return count;\n        }\n    `}</CodePanel>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport removeIndentation from './CodePanel/removeIndentation';\nimport useToast from '../Hooks/useToast';\nimport './CodePanel/Style.scss';\n\ninterface CodePanelProps {\n  children: React.ReactNode;\n  onInput?: (text: string) => void;\n  title: string;\n}\n\nexport default React.memo(({ children, onInput = () => {}, title}: CodePanelProps) => {\n\n  const\n  code = removeIndentation(children as string),\n  toast = useToast();\n\n  useEffect(() => onInput(code), [onInput, code]);\n\n  return (\n    <div className=\"panel language-markup\">\n      <h3>{title}</h3>\n      <button\n      className=\"reset\"\n      onClick={e => {\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\n        navigator.clipboard.writeText(text)\n        .then(() => toast('copied to clipboard'))\n        .catch(() => toast('copy to clipboard failed'));       \n      }}>\n        Copy to Clipboard\n      </button>\n      <pre>\n        <code\n        contentEditable\n        spellCheck=\"false\"\n        suppressContentEditableWarning={true}\n        onInput={e => {\n          const el = e.target as HTMLElement;\n          onInput(el.textContent as string);\n        }}>\n          {code}\n        </code>\n      </pre>\n    </div>\n  );\n});","import { useEffect, useState } from \"react\";\nimport M from 'materialize-css';\nimport './useToast/Style.scss';\n\nexport default () => {\n\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    message && M.toast({\n      completeCallback: () => setMessage(''),\n      html: message\n    });\n    return () => M.Toast.dismissAll();\n  }, [message]);\n\n  return setMessage;\n};","export default (text: string) => {\n  const lines = text.split(/\\r|\\n/);\n  lines.pop();\n  lines.shift();\n\n  const indentation = lines[0].match(/^\\s+/g) || [];\n\n  return (indentation\n    ? lines.map((line) => line.replace(indentation[0], ''))\n    : lines\n  ).join('\\r\\n');\n};"],"sourceRoot":""}