{"version":3,"sources":["Components/CodePanel.tsx","Hooks/useToast.ts","Components/CodePanel/removeIndentation.ts","Projects/ProjectEuler/P14.tsx"],"names":["React","memo","children","onInput","title","code","removeIndentation","toast","useToast","useEffect","className","onClick","e","text","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","useState","message","setMessage","M","completeCallback","html","Toast","dismissAll","lines","split","pop","shift","indentation","match","map","line","replace","join"],"mappings":"0JAAA,kDAWeA,cAAMC,MAAK,YAA6D,IAA1DC,EAAyD,EAAzDA,SAAyD,IAA/CC,eAA+C,MAArC,aAAqC,EAA3BC,EAA2B,EAA3BA,MAGzDC,EAAOC,kBAAkBJ,GACzBK,EAAQC,oBAIR,OAFAC,qBAAU,kBAAMN,EAAQE,KAAO,CAACF,EAASE,IAGvC,yBAAKK,UAAU,yBACb,4BAAKN,GACL,4BACAM,UAAU,QACVC,QAAS,SAAAC,GACP,IAAMC,EAAOD,EAAEE,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAUP,GAC7BQ,MAAK,kBAAMd,EAAM,0BACjBe,OAAM,kBAAMf,EAAM,iCANrB,qBAUA,6BACE,0BACAgB,iBAAe,EACfC,WAAW,QACXC,gCAAgC,EAChCtB,QAAS,SAAAS,GACP,IAAMc,EAAKd,EAAEe,OACbxB,EAAQuB,EAAGT,eAEVZ,S,kFCrCI,qBAAO,IAAD,EAEWuB,mBAAS,IAFpB,mBAEZC,EAFY,KAEHC,EAFG,KAYnB,OARArB,qBAAU,WAKR,OAJAoB,GAAWE,IAAExB,MAAM,CACjByB,iBAAkB,kBAAMF,EAAW,KACnCG,KAAMJ,IAED,kBAAME,IAAEG,MAAMC,gBACpB,CAACN,IAEGC,I,gCChBT,OAAe,mBAACjB,GACd,IAAMuB,EAAQvB,EAAKwB,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAAQJ,EAAY,GAAI,OACjDJ,GACFS,KAAK,U,gCCVT,mCAGe,qBACb,OACE,oCACE,6BAASnC,UAAU,uBACjB,wDACA,0CACA,4GAIA,yBAAKA,UAAU,oBAAf,4BACA,yBAAKA,UAAU,oBAAf,8BACA,6GAIA,yBAAKA,UAAU,oBAAf,2FACA,mOAKA,oGAGA,0GAMF,kBAAC,UAAD,CAAWN,MAAM,cAAjB","file":"static/js/6.edf262a4.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport removeIndentation from './CodePanel/removeIndentation';\nimport useToast from '../Hooks/useToast';\nimport './CodePanel/Style.scss';\n\ninterface CodePanelProps {\n  children: React.ReactNode;\n  onInput?: (text: string) => void;\n  title: string;\n}\n\nexport default React.memo(({ children, onInput = () => {}, title}: CodePanelProps) => {\n\n  const\n  code = removeIndentation(children as string),\n  toast = useToast();\n\n  useEffect(() => onInput(code), [onInput, code]);\n\n  return (\n    <div className=\"panel language-markup\">\n      <h3>{title}</h3>\n      <button\n      className=\"reset\"\n      onClick={e => {\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\n        navigator.clipboard.writeText(text)\n        .then(() => toast('copied to clipboard'))\n        .catch(() => toast('copy to clipboard failed'));       \n      }}>\n        Copy to Clipboard\n      </button>\n      <pre>\n        <code\n        contentEditable\n        spellCheck=\"false\"\n        suppressContentEditableWarning={true}\n        onInput={e => {\n          const el = e.target as HTMLElement;\n          onInput(el.textContent as string);\n        }}>\n          {code}\n        </code>\n      </pre>\n    </div>\n  );\n});","import { useEffect, useState } from \"react\";\nimport M from 'materialize-css';\nimport './useToast/Style.scss';\n\nexport default () => {\n\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    message && M.toast({\n      completeCallback: () => setMessage(''),\n      html: message\n    });\n    return () => M.Toast.dismissAll();\n  }, [message]);\n\n  return setMessage;\n};","export default (text: string) => {\n  const lines = text.split(/\\r|\\n/);\n  lines.pop();\n  lines.shift();\n\n  const indentation = lines[0].match(/^\\s+/g) || [];\n\n  return (indentation\n    ? lines.map((line) => line.replace(indentation[0], ''))\n    : lines\n  ).join('\\r\\n');\n};","import React from 'react';\nimport CodePanel from '../../Components/CodePanel';\n\nexport default () => {\n  return (\n    <>\n      <section className=\"accent-bottom panel\">\n        <h2>Longest Collatz sequence</h2>\n        <h4>Problem 14</h4>\n        <p>\n          The following iterative sequence is defined for the set of positive\n          integers:\n        </p>\n        <div className=\"center font-mono\">n → n/2 (n is even)</div>\n        <div className=\"center font-mono\">n → 3n + 1 (n is odd)</div>\n        <p>\n          Using the rule above and starting with 13, we generate the following\n          sequence:\n        </p>\n        <div className=\"center font-mono\">13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</div>\n        <p>\n          It can be seen that this sequence (starting at 13 and finishing at 1)\n          contains 10 terms. Although it has not been proved yet (Collatz\n          Problem), it is thought that all starting numbers finish at 1.\n        </p>\n        <p>\n          Which starting number, under one million, produces the longest chain?\n        </p>\n        <p>\n          NOTE: Once the chain starts the terms are allowed to go above one\n          million.\n        </p>\n      </section>\n      {/* prettier-ignore */}\n      <CodePanel title=\"JavaScript\">{`\n        m => {\n          let\n          max = 0,\n          n,\n          terms = [, 1];\n          \n          const f = i => {\n            let next;\n            if (i % 2) {\n              next = i * 3 + 1;\n            }\n            else {\n              next = i / 2;\n            }\n            if (!terms[next]) {\n              f(next);\n            }\n            terms[i] = terms[next] + 1;\n            return terms[next] + 1;\n          }\n          for (let i = 2; i < m; i++) {\n            if (!terms[i] && max < f(i)) {\n              max = terms[i];\n              n = i;\n            }\n          }\n          return n;\n        }\n    `}</CodePanel>\n    </>\n  );\n};"],"sourceRoot":""}