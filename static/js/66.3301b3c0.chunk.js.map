{"version":3,"sources":["Hooks/useIntersectionObserver.ts"],"names":["useIntersectionObserver","thresholds","useState","viewRatio","setViewRatio","ref","useRef","useEffect","observer","IntersectionObserver","entry","intersectionRatio","current","target","observe","unobserve"],"mappings":"mKAEe,SAASA,IAA8C,IAAtBC,EAAqB,uDAAR,CAAC,EAAG,GAE/D,EAC4BC,mBAAS,GADrC,mBACCC,EADD,KACYC,EADZ,KAEAC,EAAMC,iBAAgB,MAkBtB,OAhBAC,qBAAU,WAER,IAAMC,EAAW,IAAIC,sBACnB,SAAAC,GACEN,EAAaM,EAAM,GAAGC,qBAExBV,GAGF,GAAII,EAAIO,QAAS,CACf,IAAMC,EAASR,EAAIO,QAEnB,OADAJ,EAASM,QAAQD,GACV,kBAAML,EAASO,UAAUF,OAEjC,CAACZ,IAEG,CAACE,EAAWE","file":"static/js/66.3301b3c0.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport default function useIntersectionObserver(thresholds = [0, 1]) {\n  \n  const\n  [viewRatio, setViewRatio] = useState(0),\n  ref = useRef<Element>(null);\n  \n  useEffect(() => {\n\n    const observer = new IntersectionObserver(\n      entry => {\n        setViewRatio(entry[0].intersectionRatio);\n      },\n      thresholds as IntersectionObserverInit\n    );\n\n    if (ref.current) {\n      const target = ref.current;\n      observer.observe(target);\n      return () => observer.unobserve(target);\n    }\n  }, [thresholds]);\n  \n  return [viewRatio, ref];\n};"],"sourceRoot":""}