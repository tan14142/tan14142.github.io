{"version":3,"sources":["Projects/ProjectEuler/P18.tsx","Components/CodePanel.tsx","Hooks/useToast.ts","Components/CodePanel/removeIndentation.ts"],"names":["P18","className","style","minWidth","title","CodePanel","React","memo","children","onInput","code","removeIndentation","toast","useToast","useEffect","onClick","e","text","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","useState","message","setMessage","M","completeCallback","displayLength","html","Toast","dismissAll","lines","split","pop","shift","indentation","match","map","line","replace","join"],"mappings":"gHAAA,kEAEe,SAASA,IACtB,OACE,qCACE,0BAASC,UAAU,sBAAnB,UACE,oDACA,4CACA,0KAIA,sBAAKA,UAAU,mBAAf,UACE,sBAAMA,UAAU,WAAhB,eACA,uBACA,sBAAMA,UAAU,WAAhB,eAHF,KAIE,uBAJF,KAKI,sBAAMA,UAAU,WAAhB,eALJ,KAME,uBANF,OAOM,sBAAMA,UAAU,WAAhB,eAPN,QASA,6DACA,iGACA,qBAAKA,UAAU,0BAAf,SACE,sBAAKC,MAAO,CAAEC,SAAU,KAAxB,eAEE,uBAFF,QAIE,uBAJF,WAME,uBANF,cAQE,uBARF,iBAUE,uBAVF,oBAYE,uBAZF,uBAcE,uBAdF,0BAgBE,uBAhBF,6BAkBE,uBAlBF,gCAoBE,uBApBF,mCAsBE,uBAtBF,sCAwBE,uBAxBF,yCA0BE,uBA1BF,4CA4BE,uBA5BF,oDAgCF,mSAQF,cAAC,UAAD,CAAWC,MAAM,aAAjB,uhC,4EChEN,2DAWMC,EAAYC,IAAMC,MAAK,YAA6D,IAA1DC,EAAyD,EAAzDA,SAAyD,IAA/CC,eAA+C,MAArC,aAAqC,EAA3BL,EAA2B,EAA3BA,MAG5DM,EAAOC,kBAAkBH,GACzBI,EAAQC,oBAIR,OAFAC,qBAAU,kBAAML,EAAQC,KAAO,CAACD,EAASC,IAGvC,sBAAKT,UAAU,wBAAf,UACE,6BAAKG,IACL,wBACAH,UAAU,QACVc,QAAS,SAAAC,GACP,IAAMC,EAAOD,EAAEE,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAUP,GAC7BQ,MAAK,kBAAMb,EAAM,0BACjBc,OAAM,kBAAMd,EAAM,gCANrB,+BAUA,8BACE,sBACAe,iBAAe,EACfC,WAAW,QACXC,gCAAgC,EAChCpB,QAAS,SAAAO,GACP,IAAMc,EAAKd,EAAEe,OACbtB,EAAQqB,EAAGT,cANb,SAQGX,YAOIL,a,0HC5CA,SAASQ,IAEtB,MAA8BmB,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATApB,qBAAU,WAMR,OALAmB,GAAWE,IAAEvB,MAAM,CACjBwB,iBAAkB,kBAAMF,EAAW,KACnCG,cAAe,IACfC,KAAML,IAED,kBAAME,IAAEI,MAAMC,gBACpB,CAACP,IAEGC,I,gCCjBM,SAASvB,EAAkBM,GACxC,IAAMwB,EAAQxB,EAAKyB,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAAQJ,EAAY,GAAI,OACjDJ,GACFS,KAAK,QAVT","file":"static/js/14.2fa0580a.chunk.js","sourcesContent":["import CodePanel from '../../Components/CodePanel';\n\nexport default function P18() {\n  return (\n    <>\n      <section className=\"accent-bottom panel\">\n        <h2>Maximum path sum I</h2>\n        <h4>Problem 18</h4>\n        <p>\n          By starting at the top of the triangle below and moving to adjacent\n          numbers on the row below, the maximum total from top to bottom is 23.\n        </p>\n        <div className=\"center font-mono\">\n          <span className=\"red-text\">3</span>\n          <br />\n          <span className=\"red-text\">7</span> 4\n          <br />\n          2 <span className=\"red-text\">4</span> 6\n          <br />\n          8 5 <span className=\"red-text\">9</span> 3\n        </div>\n        <p>That is, 3 + 7 + 4 + 9 = 23.</p>\n        <p>Find the maximum total from top to bottom of the triangle below:</p>\n        <div className=\"center font-mono nowrap\">\n          <div style={{ minWidth: 480 }}>\n            75\n            <br />\n            95 64\n            <br />\n            17 47 82\n            <br />\n            18 35 87 10\n            <br />\n            20 04 82 47 65\n            <br />\n            19 01 23 75 03 34\n            <br />\n            88 02 77 73 07 63 67\n            <br />\n            99 65 04 28 06 16 70 92\n            <br />\n            41 41 26 56 83 40 80 70 33\n            <br />\n            41 48 72 33 47 32 37 16 94 29\n            <br />\n            53 71 44 65 25 43 91 52 97 51 14\n            <br />\n            70 11 33 28 77 73 17 78 39 68 17 57\n            <br />\n            91 71 52 38 17 14 91 43 58 50 27 29 48\n            <br />\n            63 66 04 68 89 53 67 30 73 16 69 87 40 31\n            <br />\n            04 62 98 27 23 09 70 98 73 93 38 53 60 04 23\n          </div>\n        </div>\n        <p>\n          NOTE: As there are only 16384 routes, it is possible to solve this\n          problem by trying every route. However, Problem 67, is the same\n          challenge with a triangle containing one-hundred rows; it cannot be\n          solved by brute force, and requires a clever method! ;o)\n        </p>\n      </section>\n      {/* prettier-ignore */}\n      <CodePanel title=\"JavaScript\">{`\n        () => {\n          let\n          data = [\n            [75],\n            [95, 64],\n            [17, 47, 82],\n            [18, 35, 87, 10],\n            [20, 4, 82, 47, 65],\n            [19, 1, 23, 75, 3, 34],\n            [88, 2, 77, 73, 7, 63, 67],\n            [99, 65, 4, 28, 6, 16, 70, 92],\n            [41, 41, 26, 56, 83, 40, 80, 70, 33],\n            [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],\n            [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],\n            [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],\n            [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],\n            [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],\n            [4, 62, 98, 27, 23, 09, 70, 98, 73, 93, 38, 53, 60, 4, 23]\n          ];\n\n          for (let row = data.length - 2; row >= 0; row--) {\n            data[row] = data[row].map((val, col) => val + Math.max(\n              data[row + 1][col], data[row + 1][col + 1]\n            ));\n          }\n          return data[0][0];\n        }\n    `}</CodePanel>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport removeIndentation from './CodePanel/removeIndentation';\nimport useToast from '../Hooks/useToast';\nimport './CodePanel/Style.scss';\n\ninterface CodePanelProps {\n  children: React.ReactNode;\n  onInput?: (text: string) => void;\n  title: string;\n}\n\nconst CodePanel = React.memo(({ children, onInput = () => {}, title}: CodePanelProps) => {\n\n  const\n  code = removeIndentation(children as string),\n  toast = useToast();\n\n  useEffect(() => onInput(code), [onInput, code]);\n\n  return (\n    <div className=\"panel language-markup\">\n      <h3>{title}</h3>\n      <button\n      className=\"reset\"\n      onClick={e => {\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\n        navigator.clipboard.writeText(text)\n        .then(() => toast('copied to clipboard'))\n        .catch(() => toast('copy to clipboard failed'));       \n      }}>\n        Copy to Clipboard\n      </button>\n      <pre>\n        <code\n        contentEditable\n        spellCheck=\"false\"\n        suppressContentEditableWarning={true}\n        onInput={e => {\n          const el = e.target as HTMLElement;\n          onInput(el.textContent as string);\n        }}>\n          {code}\n        </code>\n      </pre>\n    </div>\n  );\n});\n\nexport default CodePanel;","import { useEffect, useState } from \"react\";\nimport M from 'materialize-css';\nimport './useToast/Style.scss';\n\nexport default function useToast() {\n\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    message && M.toast({\n      completeCallback: () => setMessage(''),\n      displayLength: 2000,\n      html: message\n    });\n    return () => M.Toast.dismissAll();\n  }, [message]);\n\n  return setMessage;\n};","export default function removeIndentation(text: string) {\n  const lines = text.split(/\\r|\\n/);\n  lines.pop();\n  lines.shift();\n\n  const indentation = lines[0].match(/^\\s+/g) || [];\n\n  return (indentation\n    ? lines.map((line) => line.replace(indentation[0], ''))\n    : lines\n  ).join('\\r\\n');\n};"],"sourceRoot":""}