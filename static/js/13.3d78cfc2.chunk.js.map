{"version":3,"sources":["Projects/ProjectEuler/P2.tsx","Components/CodePanel.tsx","Components/CodePanel/removeIndentation.ts"],"names":["className","title","React","memo","children","onInput","code","removeIndentation","toast","useToast","useEffect","onClick","e","text","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","lines","split","pop","shift","indentation","match","map","line","replace","join"],"mappings":"sGAAA,mCAGe,qBACb,OACE,oCACE,6BAASA,UAAU,uBACjB,sDACA,yCACA,2KAKA,yBAAKA,UAAU,UAAf,0CACA,kKAMF,kBAAC,UAAD,CAAWC,MAAM,cAAjB,+U,sDCrBN,kDAWeC,cAAMC,MAAK,YAA6D,IAA1DC,EAAyD,EAAzDA,SAAyD,IAA/CC,eAA+C,MAArC,aAAqC,EAA3BJ,EAA2B,EAA3BA,MAGzDK,EAAOC,kBAAkBH,GACzBI,EAAQC,oBAIR,OAFAC,qBAAU,kBAAML,EAAQC,KAAO,CAACD,EAASC,IAGvC,yBAAKN,UAAU,yBACb,4BAAKC,GACL,4BACAD,UAAU,QACVW,QAAS,SAAAC,GACP,IAAMC,EAAOD,EAAEE,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAUP,GAC7BQ,MAAK,kBAAMb,EAAM,0BACjBc,OAAM,kBAAMd,EAAM,iCANrB,qBAUA,6BACE,0BACAe,iBAAe,EACfC,WAAW,QACXC,gCAAgC,EAChCpB,QAAS,SAAAO,GACP,IAAMc,EAAKd,EAAEe,OACbtB,EAAQqB,EAAGT,eAEVX,S,gCCzCX,OAAe,mBAACO,GACd,IAAMe,EAAQf,EAAKgB,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAAQJ,EAAY,GAAI,OACjDJ,GACFS,KAAK","file":"static/js/13.3d78cfc2.chunk.js","sourcesContent":["import React from 'react';\nimport CodePanel from '../../Components/CodePanel';\n\nexport default () => {\n  return (\n    <>\n      <section className=\"accent-bottom panel\">\n        <h2>Even Fibonacci numbers</h2>\n        <h4>Problem 2</h4>\n        <p>\n          Each new term in the Fibonacci sequence is generated by adding the\n          previous two terms. By starting with 1 and 2, the first 10 terms will\n          be:\n        </p>\n        <div className=\"center\">1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</div>\n        <p>\n          By considering the terms in the Fibonacci sequence whose values do not\n          exceed four million, find the sum of the even-valued terms.\n        </p>\n      </section>\n      {/* prettier-ignore */}\n      <CodePanel title=\"JavaScript\">{`\n        m => {\n          let\n          i = 0,\n          j = 1,\n          k,\n          result = 0;\n  \n          while (j <= m) {\n            k = j;\n            j += i;\n            i = k;\n            if (i % 2 === 0) {\n              result += i;\n            }\n          }\n          return result;\n        }\n    `}</CodePanel>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport removeIndentation from './CodePanel/removeIndentation';\nimport useToast from '../Hooks/useToast';\nimport './CodePanel/Style.scss';\n\ninterface CodePanelProps {\n  children: React.ReactNode;\n  onInput?: (text: string) => void;\n  title: string;\n}\n\nexport default React.memo(({ children, onInput = () => {}, title}: CodePanelProps) => {\n\n  const\n  code = removeIndentation(children as string),\n  toast = useToast();\n\n  useEffect(() => onInput(code), [onInput, code]);\n\n  return (\n    <div className=\"panel language-markup\">\n      <h3>{title}</h3>\n      <button\n      className=\"reset\"\n      onClick={e => {\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\n        navigator.clipboard.writeText(text)\n        .then(() => toast('copied to clipboard'))\n        .catch(() => toast('copy to clipboard failed'));       \n      }}>\n        Copy to Clipboard\n      </button>\n      <pre>\n        <code\n        contentEditable\n        spellCheck=\"false\"\n        suppressContentEditableWarning={true}\n        onInput={e => {\n          const el = e.target as HTMLElement;\n          onInput(el.textContent as string);\n        }}>\n          {code}\n        </code>\n      </pre>\n    </div>\n  );\n});","export default (text: string) => {\n  const lines = text.split(/\\r|\\n/);\n  lines.pop();\n  lines.shift();\n\n  const indentation = lines[0].match(/^\\s+/g) || [];\n\n  return (indentation\n    ? lines.map((line) => line.replace(indentation[0], ''))\n    : lines\n  ).join('\\r\\n');\n};"],"sourceRoot":""}