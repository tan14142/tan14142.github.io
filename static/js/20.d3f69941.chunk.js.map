{"version":3,"sources":["Projects/ProjectEuler/P23.tsx","Components/CodePanel.tsx","Hooks/useToast.ts","Components/CodePanel/removeIndentation.ts"],"names":["P23","className","title","CodePanel","React","memo","children","onInput","code","removeIndentation","toast","useToast","useEffect","onClick","e","text","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","useState","message","setMessage","M","completeCallback","displayLength","html","Toast","dismissAll","lines","split","pop","shift","indentation","match","map","line","replace","join"],"mappings":"gHAAA,kEAEe,SAASA,IACtB,OACE,qCACE,0BAASC,UAAU,sBAAnB,UACE,mDACA,4CACA,mQAMA,iKAIA,6fASA,yIAKF,cAAC,UAAD,CAAWC,MAAM,aAAjB,muB,4EChCN,2DAWMC,EAAYC,IAAMC,MAAK,YAA6D,IAA1DC,EAAyD,EAAzDA,SAAyD,IAA/CC,eAA+C,MAArC,aAAqC,EAA3BL,EAA2B,EAA3BA,MAG5DM,EAAOC,kBAAkBH,GACzBI,EAAQC,oBAIR,OAFAC,qBAAU,kBAAML,EAAQC,KAAO,CAACD,EAASC,IAGvC,sBAAKP,UAAU,wBAAf,UACE,6BAAKC,IACL,wBACAD,UAAU,QACVY,QAAS,SAAAC,GACP,IAAMC,EAAOD,EAAEE,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAUP,GAC7BQ,MAAK,kBAAMb,EAAM,0BACjBc,OAAM,kBAAMd,EAAM,gCANrB,+BAUA,8BACE,sBACAe,iBAAe,EACfC,WAAW,QACXC,gCAAgC,EAChCpB,QAAS,SAAAO,GACP,IAAMc,EAAKd,EAAEe,OACbtB,EAAQqB,EAAGT,cANb,SAQGX,YAOIL,a,0HC5CA,SAASQ,IAEtB,MAA8BmB,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATApB,qBAAU,WAMR,OALAmB,GAAWE,IAAEvB,MAAM,CACjBwB,iBAAkB,kBAAMF,EAAW,KACnCG,cAAe,IACfC,KAAML,IAED,kBAAME,IAAEI,MAAMC,gBACpB,CAACP,IAEGC,I,gCCjBM,SAASvB,EAAkBM,GACxC,IAAMwB,EAAQxB,EAAKyB,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAAQJ,EAAY,GAAI,OACjDJ,GACFS,KAAK,QAVT","file":"static/js/20.d3f69941.chunk.js","sourcesContent":["import CodePanel from '../../Components/CodePanel';\n\nexport default function P23() {\n  return (\n    <>\n      <section className=\"accent-bottom panel\">\n        <h2>Non-abundant sums</h2>\n        <h4>Problem 23</h4>\n        <p>\n          A perfect number is a number for which the sum of its proper divisors\n          is exactly equal to the number. For example, the sum of the proper\n          divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28\n          is a perfect number.\n        </p>\n        <p>\n          A number n is called deficient if the sum of its proper divisors is\n          less than n and it is called abundant if this sum exceeds n.\n        </p>\n        <p>\n          As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the\n          smallest number that can be written as the sum of two abundant numbers\n          is 24. By mathematical analysis, it can be shown that all integers\n          greater than 28123 can be written as the sum of two abundant numbers.\n          However, this upper limit cannot be reduced any further by analysis\n          even though it is known that the greatest number that cannot be\n          expressed as the sum of two abundant numbers is less than this limit.\n        </p>\n        <p>\n          Find the sum of all the positive integers which cannot be written as\n          the sum of two abundant numbers.\n        </p>\n      </section>\n      <CodePanel title=\"JavaScript\">{`\n        () => {\n          let\n          limit = 28123,\n          abundants = [],\n          sieve = new Array(limit).fill(true),\n          sumsOfDivisors = new Array(limit).fill(1);\n\n          for (let i = 2; i <= limit; i++) {\n            for (let j = i + i; j < limit; j += i) {\n              sumsOfDivisors[j] += i;\n            }\n            if (sumsOfDivisors[i] > i && sumsOfDivisors[i] < limit) {\n              abundants.push(i);\n              abundants.map(abundant => {\n                sieve[abundant + i] = false;\n              });\n            }\n          }\n          return sieve.reduce((sum, value, key) => value\n            ? sum + key\n            : sum\n          , 0);\n        }\n    `}</CodePanel>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport removeIndentation from './CodePanel/removeIndentation';\nimport useToast from '../Hooks/useToast';\nimport './CodePanel/Style.scss';\n\ninterface CodePanelProps {\n  children: React.ReactNode;\n  onInput?: (text: string) => void;\n  title: string;\n}\n\nconst CodePanel = React.memo(({ children, onInput = () => {}, title}: CodePanelProps) => {\n\n  const\n  code = removeIndentation(children as string),\n  toast = useToast();\n\n  useEffect(() => onInput(code), [onInput, code]);\n\n  return (\n    <div className=\"panel language-markup\">\n      <h3>{title}</h3>\n      <button\n      className=\"reset\"\n      onClick={e => {\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\n        navigator.clipboard.writeText(text)\n        .then(() => toast('copied to clipboard'))\n        .catch(() => toast('copy to clipboard failed'));       \n      }}>\n        Copy to Clipboard\n      </button>\n      <pre>\n        <code\n        contentEditable\n        spellCheck=\"false\"\n        suppressContentEditableWarning={true}\n        onInput={e => {\n          const el = e.target as HTMLElement;\n          onInput(el.textContent as string);\n        }}>\n          {code}\n        </code>\n      </pre>\n    </div>\n  );\n});\n\nexport default CodePanel;","import { useEffect, useState } from \"react\";\nimport M from 'materialize-css';\nimport './useToast/Style.scss';\n\nexport default function useToast() {\n\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    message && M.toast({\n      completeCallback: () => setMessage(''),\n      displayLength: 2000,\n      html: message\n    });\n    return () => M.Toast.dismissAll();\n  }, [message]);\n\n  return setMessage;\n};","export default function removeIndentation(text: string) {\n  const lines = text.split(/\\r|\\n/);\n  lines.pop();\n  lines.shift();\n\n  const indentation = lines[0].match(/^\\s+/g) || [];\n\n  return (indentation\n    ? lines.map((line) => line.replace(indentation[0], ''))\n    : lines\n  ).join('\\r\\n');\n};"],"sourceRoot":""}