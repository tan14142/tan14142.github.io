{"version":3,"sources":["Projects/BreakingBadAPI.tsx"],"names":["BreakingBadAPI","selectRef","useRef","useState","episodes","setEpisodes","characters","setCharacters","highlight","setHighlight","useBreakingBadAPI","reduced","key","character","length","some","substring","includes","push","sort","useEffect","M","FormSelect","init","current","className","Timeline","defaultValue","value","onChange","e","target","ref","disabled","map","svgRef","height","clientHeight","width","clientWidth","maxDate","max","episode","getDate","air_date","minDate","min","xScale","scaleTime","domain","range","yScale","scaleLinear","xAxis","axisBottom","svg","select","selectAll","call","styles","transform","data","join","attrs","class","x1","x2","y1","y2","transition","stroke","interrupt","style","borderRight","borderTop","overflow","date","split","Date","query","callback","savedCallback","controller","AbortController","signal","fetch","then","response","ok","json","catch","name","console","log","warn","abort"],"mappings":"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","file":"static/js/67.2648a899.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { axisBottom, max, min, scaleLinear, scaleTime, select } from 'd3';\nimport M from 'materialize-css';\nimport 'd3-selection-multi';\n\nexport default function BreakingBadAPI() {\n  \n  const selectRef = useRef(),\n        [episodes, setEpisodes] = useState([]),\n        [characters, setCharacters] = useState([]),\n        [highlight, setHighlight] = useState();\n  \n  useBreakingBadAPI(\n    'episodes?series',\n    episodes => {\n      let reduced = {};\n      \n      for (const key in episodes) {\n        for (const character in episodes[key].characters) {\n          if (episodes[key].characters[character].length\n          && ![\n            'fly',\n            'Erhmantraut',\n            'White White'\n            ].some(substring => episodes[key].characters[character]\n              .includes(substring)\n            )\n          ) {\n            reduced[episodes[key].characters[character]] = null;\n          }\n        }\n      }\n      \n      let characters = [];\n      \n      for (const character in reduced) {\n        characters.push(character);\n      }\n      \n      characters.sort();\n      \n      setCharacters(characters);\n      setEpisodes(episodes);\n    }\n  );\n  useEffect(() => {\n    M.FormSelect.init(selectRef.current, {});\n  }, []);\n  \n  return (\n    <section className=\"panel center\">\n      <h2>Breaking Bad Timeline</h2>\n      <Timeline episodes={episodes} highlight={highlight} />\n      <div className=\"input-field\">\n        <select\n        className=\"browser-default btn center-content\"\n        defaultValue=\"0\"\n        value={highlight}\n        onChange={e => setHighlight(e.target.value)}\n        ref={selectRef}>\n          <option disabled value=\"0\">Choose your character</option>\n          {characters.map(character => (\n          <option key={character} value={character}>{character}</option>\n          ))}\n        </select>\n      </div>\n    </section>\n  );\n};\n\nconst Timeline = ({ episodes, highlight }) => {\n  \n  const svgRef = useRef();\n  \n  useEffect(() => {\n    \n    const height = svgRef.current.clientHeight,\n          width = svgRef.current.clientWidth,\n    \n          maxDate = max(episodes, episode => getDate(episode.air_date)),\n          minDate = min(episodes, episode => getDate(episode.air_date)),\n\n          xScale = scaleTime()\n            .domain([minDate, maxDate])\n            .range([0, width]),\n          yScale = scaleLinear()\n            .domain([max(episodes, episode => episode.characters.length), 0])\n            .range([0 , height]),\n          \n          xAxis = axisBottom(xScale),\n          \n          svg = select(svgRef.current);\n          \n    svg\n      .selectAll('.xAxis')\n      .call(xAxis)\n      .styles({\n        transform : `translateY(${height}px)`\n      });\n    \n    svg\n      .selectAll('.episode')\n      .data(episodes)\n      .join('line')\n      .attrs({\n        class : 'episode',\n        x1 : episode => xScale(getDate(episode.air_date)),\n        x2 : episode => xScale(getDate(episode.air_date)),\n        y1 : height,\n        y2 : height\n      })\n      .transition()\n      .attrs({\n        stroke : episode => {\n          return episode.characters.includes(highlight)\n          ? 'blue'\n          : 'black'\n        },\n        y2 : episode => yScale(episode.characters.length)\n      });\n\n    return () => svg.interrupt();\n\n  }, [episodes, highlight]);\n  \n  return (\n    <svg\n    ref={svgRef}\n    style={{\n      borderRight: '2rem solid transparent',\n      borderTop: '1rem solid transparent',\n      overflow : 'visible'\n    }}>\n      <g className=\"xAxis\" />\n    </svg>\n  );\n}\n\nconst getDate = date => {\n  date = date.split('-');\n  return new Date(date[2], date[0] - 1, date[1]);\n};\n\nconst useBreakingBadAPI = (query, callback) => {\n  \n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  \n  useEffect(() => {\n    \n    const controller = new AbortController(),\n          signal = controller.signal;\n\n    fetch(\n      'https://www.breakingbadapi.com/api/' + query + '=Breaking+Bad',\n      {signal})\n      .then(response => response.ok && response.json())\n      .then(savedCallback.current)\n      .catch(e => {\n        if (e.name === 'AbortError') {\n          console.log('Fetch was aborted');\n        } else {\n          console.warn(e);\n        }\n      });\n    \n    return () => controller.abort();\n  }, [query]);\n};"],"sourceRoot":""}