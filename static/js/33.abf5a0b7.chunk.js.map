{"version":3,"sources":["Projects/PracticeHindi/P4.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","Hooks/useToast.ts","Components/PracticeButtons.tsx","Utils/shuffle.ts","Components/PracticeChips.tsx","Projects/PracticeHindi/Story.tsx","Projects/PracticeHindi/Numbers.ts"],"names":["P4","setProgress","sentences","en","hi","randomize","random","limit","Math","round","translateAmPm","isAm","hour","translateMin","min","translateHour","numbers","Array","length","fill","undefined","map","_toConsumableArray","arr","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","useToast","useState","message","setMessage","useEffect","M","toast","completeCallback","displayLength","html","Toast","dismissAll","Progress","handleBack","handleRestart","handleTraining","handleSubmit","className","onClick","style","left","position","shuffle","array","randomIndex","temporaryValue","currentIndex","tempArr","slice","floor","Chips","dictionary","handleClick","margin","keys","sort","a","b","toLowerCase","localeCompare","word","key","href","e","preventDefault","Story","questions","setQuestions","answer","setAnswer","mapSelection","selection","sentence","option","split","setSelection","background","id","substr","lastIndexOf","includes","trim","shift"],"mappings":"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","file":"static/js/33.abf5a0b7.chunk.js","sourcesContent":["import Story from './Story';\r\nimport numbers from './Numbers';\r\nimport ProgressProps from './ProgressProps';\r\n\r\nexport default function P4({ setProgress }: ProgressProps) {\r\n\r\n  const\r\n  \r\n  sentences = [\r\n    {\r\n      en: \"today\",\r\n      hi: [\"aaj\"]\r\n    },\r\n    {\r\n      en: \"tomorrow / yesterday\",\r\n      hi: [\"kal\"]\r\n    },\r\n    {\r\n      en: \"time\",\r\n      hi: [\"baje\"]\r\n    },\r\n    {\r\n      en: \"o'clock\",\r\n      hi: [\"pure\"]\r\n    },\r\n    {\r\n      en: \"quarter past\",\r\n      hi: [\"sawa\"]\r\n    },\r\n    {\r\n      en: \"half past\",\r\n      hi: [\"sadhe\"]\r\n    },\r\n    {\r\n      en: \"quarter to\",\r\n      hi: [\"paune\"]\r\n    },\r\n    {\r\n      en: \"in the morning\",\r\n      hi: [\"subha ke\"]\r\n    },\r\n    {\r\n      en: \"in the afternoon\",\r\n      hi: [\"shaam ke\"]\r\n    },\r\n    {\r\n      en: \"at night\",\r\n      hi: [\"raat ko\"]\r\n    }\r\n  ],\r\n\r\n  randomize = () => {\r\n\r\n    const\r\n\r\n    random = (limit: number) => Math.round(Math.random() * limit),\r\n    translateAmPm = (isAm: boolean, hour: number) => {\r\n      if (isAm) {\r\n        if (hour === 12 || hour < 4) {\r\n          return \"raat ko\";\r\n        }\r\n        return \"subha ke\";\r\n      }\r\n      if (hour === 12 || hour < 8) {\r\n        return \"shaam ke\";\r\n      }\r\n      return \"raat ko\";\r\n    },\r\n    translateMin = (min: number) => {\r\n      switch (min) {\r\n        case 0: \r\n          return \"pure\";\r\n        case 15:\r\n          return \"sawa\";\r\n        case 30:\r\n          return \"sadhe\";\r\n        case 45:\r\n          return \"paune\";\r\n      }\r\n    },\r\n    translateHour = (hour:number, min: number) => {\r\n      if (min === 45) {\r\n        return numbers[hour === 12 ? 1 : hour + 1] + \" bajne wale hai\"\r\n      }\r\n      return numbers[hour] + \" baje hai\"\r\n    }\r\n\r\n    return Array(sentences.length).fill(undefined).map(() => {\r\n\r\n      const\r\n\r\n      isAm = !!random(1),\r\n      hour = random(11) + 1,\r\n      min = random(3) * 15;\r\n\r\n      return {\r\n        en: hour + \":\" + (min === 0 ? \"00\" : min) + \" \" + (isAm ? \"am\" : \"pm\"),\r\n        hi: [translateAmPm(isAm, hour) + \" \" + translateMin(min) + \" \" + translateHour(hour, min)]\r\n      }\r\n    });\r\n  }\r\n\r\n  return <Story randomize={randomize} sentences={sentences} setProgress={setProgress} />\r\n};","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useEffect, useState } from \"react\";\r\nimport M from 'materialize-css';\r\nimport './useToast/Style.scss';\r\n\r\nexport default function useToast() {\r\n\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    message && M.toast({\r\n      completeCallback: () => setMessage(''),\r\n      displayLength: 2000,\r\n      html: message\r\n    });\r\n    return () => M.Toast.dismissAll();\r\n  }, [message]);\r\n\r\n  return setMessage;\r\n};","interface ProgressProps {\r\n  handleBack: () => void,\r\n  handleRestart: () => void,\r\n  handleTraining: () => void,\r\n  handleSubmit: () => void\r\n}\r\n\r\nexport default function Progress({handleBack, handleRestart, handleTraining, handleSubmit}: ProgressProps) {\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <button\r\n        className=\"btn col l2 m3 s4 waves-effect waves-light\"\r\n        onClick={handleBack}>\r\n          <i className=\"material-icons left\">chevron_left</i>\r\n          Back\r\n      </button>\r\n      <button\r\n        className=\"btn col s1 offset-l3 offset-m2 offset-s1 waves-effect waves-light\"\r\n        onClick={handleRestart}>\r\n          <i className=\"material-icons\">replay</i>\r\n      </button>\r\n      <button\r\n        className=\"btn col s1 waves-effect waves-light\"\r\n        onClick={handleTraining}\r\n          style={{\r\n          left: \".25rem\",\r\n          position: \"relative\"\r\n        }}>\r\n          <i className=\"material-icons\">fitness_center</i>\r\n      </button>\r\n      <button\r\n        className=\"btn col l2 m3 s4 offset-l3 offset-m2 offset-s1 waves-effect waves-light\"\r\n        onClick={handleSubmit}>\r\n          Submit\r\n          <i className=\"material-icons right\">chevron_right</i>\r\n      </button>\r\n    </div>\r\n  );\r\n};","export default function shuffle(array: any[]): any[] {\r\n    \r\n  let\r\n  currentIndex: number = array.length,\r\n  randomIndex,\r\n  temporaryValue,\r\n  tempArr: any[] = array.slice();\r\n\r\n  while (0 !== currentIndex) {\r\n\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    temporaryValue = tempArr[currentIndex];\r\n    tempArr[currentIndex] = tempArr[randomIndex];\r\n    tempArr[randomIndex] = temporaryValue;\r\n  }\r\n  return tempArr;\r\n};","interface ChipsProps {\r\n  dictionary: string[],\r\n  handleClick: (word: string) => void\r\n}\r\n\r\nexport default function Chips({ dictionary, handleClick }: ChipsProps) {\r\n\r\n  return (\r\n    <div style={{ margin: \".5rem 0\" }}>\r\n      {Object.keys(dictionary).sort(\r\n        (a, b) => a.toLowerCase().localeCompare(b.toLowerCase())\r\n      ).map((word, key) => {\r\n        return (\r\n          <a\r\n            className=\"chip\" href=\"!#\" key={key}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleClick(word);\r\n            }}>\r\n              {word}\r\n          </a>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};","import { useState } from 'react';\r\nimport Buttons from '../../Components/PracticeButtons';\r\nimport Chips from '../../Components/PracticeChips';\r\nimport useToast from '../../Hooks/useToast';\r\nimport shuffle from '../../Utils/shuffle';\r\nimport ProgressProps from './ProgressProps';\r\nimport './Style.scss';\r\n\r\ninterface StoryProps extends ProgressProps {\r\n  randomize?: undefined | (() => sentences),\r\n  sentences: sentences\r\n}\r\n\r\ntype sentences = {\r\n  en: string;\r\n  hi: string[];\r\n}[];\r\n\r\nexport default function Story({ randomize = undefined, sentences, setProgress }: StoryProps) {\r\n\r\n  const\r\n\r\n  [questions, setQuestions] = useState([...sentences]),\r\n  [answer, setAnswer] = useState(\"\"),\r\n\r\n  mapSelection = (sentences: sentences) => {\r\n\r\n    let selection: any = {};\r\n  \r\n    sentences.map(sentence => {\r\n      return sentence.hi.map(option => {\r\n        return option.split(\" \").map(word => {\r\n          return selection[word] = null;\r\n        });\r\n      })\r\n    });\r\n\r\n    return selection;\r\n  },\r\n\r\n  [selection, setSelection] = useState(mapSelection(sentences)),\r\n\r\n  toast = useToast(),\r\n  \r\n  handleChip = (word: string) => {\r\n    setAnswer(answer + \" \" + word);\r\n  },\r\n\r\n  handleBack = () => {\r\n    setAnswer(answer.substr(0, answer.lastIndexOf(\" \")));\r\n  },\r\n\r\n  handleRestart = () => {\r\n    setAnswer(\"\");\r\n    setQuestions([...sentences]);\r\n    randomize && setSelection(mapSelection([...sentences]));\r\n    setProgress(0);\r\n  },\r\n\r\n  handleTraining = () => {\r\n    handleRestart();\r\n\r\n    const questions = randomize ? randomize() : [...sentences];\r\n    setQuestions(shuffle(questions));\r\n    setSelection(mapSelection(questions));\r\n  },\r\n\r\n  handleSubmit = () => {\r\n    if (questions[0].hi.includes(answer.trim())) {\r\n\r\n      toast('sahee!');\r\n      setAnswer(\"\");\r\n\r\n      if (questions.length > 1) {\r\n        questions.shift();\r\n        setProgress(1 - questions.length / sentences.length);\r\n      }\r\n      else {\r\n        questions[0].en = \"Well done!\"\r\n        setProgress(1);\r\n      }\r\n    }\r\n    else {\r\n      toast('galat!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section className=\"accent-bottom panel\">\r\n        <h4 className=\"center\" style={{ background: \"#ee6e73\" }}>{questions[0].en}</h4>\r\n        <h4 className=\"center\" id=\"StoryAnswer\">{answer}</h4>\r\n        <Chips\r\n          dictionary={selection}\r\n          handleClick={handleChip} />\r\n      </section>\r\n      <Buttons\r\n        handleBack={handleBack}\r\n        handleRestart={handleRestart}\r\n        handleTraining={handleTraining}\r\n        handleSubmit={handleSubmit} />\r\n    </>\r\n  );\r\n};","const numbers = [\r\n  \"shoony\",\r\n  \"ek\",\r\n  \"do\",\r\n  \"teen\",\r\n  \"chaar\",\r\n  \"panch\",\r\n  \"che\",\r\n  \"saat\",\r\n  \"art\",\r\n  \"no\",\r\n  \"das\",\r\n  \"giara\",\r\n  \"bara\",\r\n  \"tera\",\r\n  \"chauda\",\r\n  \"pandra\",\r\n  \"sola\",\r\n  \"satara\",\r\n  \"ahtara\",\r\n  \"unnees\",\r\n  \"bees\",\r\n  \"iktees\",\r\n  \"batees\",\r\n  \"taees\",\r\n  \"chaubees\",\r\n  \"pachees\",\r\n  \"chabees\",\r\n  \"saatees\",\r\n  \"aathaees\",\r\n  \"untees\",\r\n  \"tees\",\r\n  \"ektees\",\r\n  \"baktees\",\r\n  \"taetees\",\r\n  \"chautees\",\r\n  \"pachantees\",\r\n  \"chatees\",\r\n  \"saataees\",\r\n  \"aathaitees\",\r\n  \"notalees\",\r\n  \"chaarlees\",\r\n  \"ikatalees\",\r\n  \"bayalees\",\r\n  \"tayantalees\",\r\n  \"chawalees\",\r\n  \"payantalees\",\r\n  \"chiyaalees\",\r\n  \"sayantalees\",\r\n  \"artalees\",\r\n  \"unachaas\",\r\n  \"pachaas\",\r\n  \"ikyawaan\",\r\n  \"bawaan\",\r\n  \"tirwaan\",\r\n  \"chawaan\",\r\n  \"pachpan\",\r\n  \"chappan\",\r\n  \"sattawaan\",\r\n  \"uttawaan\",\r\n  \"unsaat\",\r\n  \"saat\",\r\n  \"ikasaat\",\r\n  \"basaat\",\r\n  \"tirsaat\",\r\n  \"chaunsaat\",\r\n  \"paynsaat\",\r\n  \"chiyansaat\",\r\n  \"sursaat\",\r\n  \"ursaat\",\r\n  \"unahattar\",\r\n  \"sattar\",\r\n  \"ikattar\",\r\n  \"bakattar\",\r\n  \"tikattar\",\r\n  \"chahattar\",\r\n  \"pachahattar\",\r\n  \"chihattar\",\r\n  \"saathattar\",\r\n  \"athahattar\",\r\n  \"unaasee\",\r\n  \"assi\",\r\n  \"ikyassi\",\r\n  \"bayassi\",\r\n  \"tirassi\",\r\n  \"chaurassi\",\r\n  \"pachassi\",\r\n  \"chiyassi\",\r\n  \"saatassi\",\r\n  \"athaassi\",\r\n  \"nawaassi\",\r\n  \"nabbe\",\r\n  \"ikyanway\",\r\n  \"baanway\",\r\n  \"tiranway\",\r\n  \"chauranway\",\r\n  \"pachanway\",\r\n  \"chiyanway\",\r\n  \"sattanway\",\r\n  \"uttanway\",\r\n  \"ninyanway\",\r\n  \"sau\"\r\n];\r\n\r\nexport default numbers;"],"sourceRoot":""}