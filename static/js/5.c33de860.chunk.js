(this.webpackJsonppages=this.webpackJsonppages||[]).push([[5,46,51,55,56,63,84,86,87],{174:function(e,t,n){},175:function(e,t,n){},176:function(e,t,n){},80:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return a}));var r=n(16),i=n(1),c=n(59),s=n.n(c);n(174);function a(){var e=Object(i.useState)(""),t=Object(r.a)(e,2),n=t[0],c=t[1];return Object(i.useEffect)((function(){return n&&s.a.toast({completeCallback:function(){return c("")},displayLength:2e3,html:n}),function(){return s.a.Toast.dismissAll()}}),[n]),c}},81:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return s}));var r=n(84),i=n(83),c=(n(176),n(0));function s(e){var t=e.lang,n=e.onInput,s=void 0===n?function(){}:n;return Object(c.jsx)("div",{className:"panel language-markup",children:Object(c.jsx)(i.default,{tabs:Object.keys(t),children:Object.entries(t).map((function(e,t){return Object(c.jsx)(r.default,{content:e[1],onInput:s},t)}))})})}},82:function(e,t,n){"use strict";function r(e){var t=e.split(/\r|\n/);t.pop(),t.shift();var n=t[0].match(/^\s+/g)||[];return(n?t.map((function(e){return e.replace(n[0],"")})):t).join("\r\n")}n.r(t),n.d(t,"default",(function(){return r}))},83:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));var r=n(1),i=n.n(r),c=n(6),s=n(59),a=n.n(s),l=(n(175),n(0));function o(e){var t=e.children,n=e.tabs,s=Object(r.useRef)(null);return Object(r.useEffect)((function(){var e=a.a.Tabs.init(s.current,{});return function(){return e.destroy()}}),[]),Object(l.jsxs)(l.Fragment,{children:[Object(l.jsx)("ul",{className:"tabs",ref:s,children:n.map((function(e,t){return Object(l.jsx)("li",{className:"tab",children:Object(l.jsx)(c.b,{to:"#"+e,children:e})},t)}))}),i.a.Children.toArray(t).map((function(e,t){return Object(l.jsx)("div",{className:"flex-column",id:n[t],children:e},t)}))]})}},84:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return a}));var r=n(1),i=n(82),c=n(80),s=n(0);function a(e){var t=e.content,n=e.onInput,a=void 0===n?function(){}:n,l=Object(i.default)(t),o=Object(c.default)();return Object(r.useEffect)((function(){return a(l)}),[a,l]),Object(s.jsxs)(s.Fragment,{children:[Object(s.jsx)("button",{className:"reset",onClick:function(e){var t=e.currentTarget.parentNode.querySelector("code").textContent;navigator.clipboard.writeText(t).then((function(){return o("copied to clipboard")})).catch((function(){return o("copy to clipboard failed")}))},children:"Copy to Clipboard"}),Object(s.jsx)("pre",{children:Object(s.jsx)("code",{contentEditable:!0,spellCheck:"false",suppressContentEditableWarning:!0,onInput:function(e){var t=e.target;a(t.textContent)},children:l})})]})}},95:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return c}));var r=n(81),i=n(0);function c(){return Object(i.jsxs)(i.Fragment,{children:[Object(i.jsxs)("section",{className:"accent-bottom panel",children:[Object(i.jsx)("h2",{children:"Highly divisible triangular number"}),Object(i.jsx)("h4",{children:"Problem 12"}),Object(i.jsx)("p",{children:"The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:"}),Object(i.jsx)("div",{className:"center",children:"1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ..."}),Object(i.jsx)("p",{children:"Let us list the factors of the first seven triangle numbers:"}),Object(i.jsx)("table",{className:"concise-table container highlight striped",style:{lineHeight:"1rem",width:"10rem"},children:Object(i.jsxs)("tbody",{children:[Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"1:"}),Object(i.jsx)("td",{children:"1"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"3:"}),Object(i.jsx)("td",{children:"1, 3"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"6:"}),Object(i.jsx)("td",{children:"1, 2, 3, 6"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"10:"}),Object(i.jsx)("td",{children:"1, 2, 5, 10"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"15:"}),Object(i.jsx)("td",{children:"1, 3, 5, 15"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"21:"}),Object(i.jsx)("td",{children:"1, 3, 7, 21"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"28:"}),Object(i.jsx)("td",{children:"1, 2, 4, 7, 14, 28"})]})]})}),Object(i.jsx)("p",{children:"We can see that 28 is the first triangle number to have over five divisors."}),Object(i.jsx)("p",{children:"What is the value of the first triangle number to have over five hundred divisors?"})]}),Object(i.jsx)(r.default,{lang:{JavaScript:"\n          m => {\n            let\n            primes = [],\n            tDividers = 1,\n            t1 = 1,\n            t2 = 1,\n\n            primeFactorization = n => {\n              \n              let dividers = 1;\n              \n              for (let key = 0; primes[key] <= n; key++) {\n                \n                let power = 1;\n                \n                while (n % primes[key] === 0) {\n                  n /= primes[key];\n                  power++;\n                }\n                dividers *= power;\n              }\n              return dividers;\n            };\n\n            const\n            list = Array(m * 4).fill(true);\n            list[0] = list[1] = false;\n            \n            list.map((v, k) => {\n              if (v) {\n                primes.push(k);\n                for (let key = k * k; key < list.length; key += k) {\n                  list[key] = false;\n                }\n              }\n            });\n\n            for (var counter = 2; tDividers <= m ; counter++) {\n              if (counter % 2) {\n                t1 = primeFactorization((counter + 1) / 2);\n              }\n              else {\n                t2 = primeFactorization(counter + 1);\n              }\n              tDividers = t1 * t2;\n            }\n            return counter * (counter - 1) / 2;\n          }\n        ",Python:"\n          target = 500\n          estimate = target * 50\n          primes = [2]\n          sieve = estimate // 2 * [False, True]\n          sieve[1] = False\n          sieve[2] = True\n\n          for prime in range(3, estimate, 2):\n            if sieve[prime]:\n              primes.append(prime)\n              for composite in range(prime * prime, estimate, prime):\n                sieve[composite] = False\n\n          def count_divisors(n):\n            divisors = 1\n            for prime in primes:\n              power = 1\n              while n % prime == 0:\n                n //= prime\n                power +=1\n              divisors *= power\n            return divisors\n\n          term = 1\n\n          for i in range(2, estimate):\n            term += i\n            if term % 2 == 0 and count_divisors(term) > target:\n              break\n\n          print(term)\n      "}})]})}}}]);
//# sourceMappingURL=5.c33de860.chunk.js.map