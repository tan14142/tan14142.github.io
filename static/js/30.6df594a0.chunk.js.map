{"version":3,"sources":["Projects/ProjectEuler/P8.tsx","Components/CodePanel.tsx","Components/CodePanel/removeIndentation.ts"],"names":["className","title","React","memo","children","onInput","code","removeIndentation","toast","useToast","useEffect","onClick","e","text","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","lines","split","pop","shift","indentation","match","map","line","replace","join"],"mappings":"sGAAA,mCAGe,qBACb,OACE,oCACE,6BAASA,UAAU,uBACjB,2DACA,yCACA,kJAIA,yBAAKA,UAAU,2BAAf,qDAEE,6BAFF,qDAIE,6BAJF,qDAME,6BANF,qDAQE,6BARF,qDAUE,6BAVF,qDAYE,6BAZF,qDAcE,6BAdF,qDAgBE,6BAhBF,qDAkBE,6BAlBF,qDAoBE,6BApBF,qDAsBE,6BAtBF,qDAwBE,6BAxBF,qDA0BE,6BA1BF,qDA4BE,6BA5BF,qDA8BE,6BA9BF,qDAgCE,6BAhCF,qDAkCE,6BAlCF,qDAoCE,6BApCF,qDAsCE,6BAtCF,sDAyCA,6JAMF,kBAAC,UAAD,CAAWC,MAAM,cAAjB,u3C,sDC5DN,kDAWeC,cAAMC,MAAK,YAA6D,IAA1DC,EAAyD,EAAzDA,SAAyD,IAA/CC,eAA+C,MAArC,aAAqC,EAA3BJ,EAA2B,EAA3BA,MAGzDK,EAAOC,kBAAkBH,GACzBI,EAAQC,oBAIR,OAFAC,qBAAU,kBAAML,EAAQC,KAAO,CAACD,EAASC,IAGvC,yBAAKN,UAAU,yBACb,4BAAKC,GACL,4BACAD,UAAU,QACVW,QAAS,SAAAC,GACP,IAAMC,EAAOD,EAAEE,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAUP,GAC7BQ,MAAK,kBAAMb,EAAM,0BACjBc,OAAM,kBAAMd,EAAM,iCANrB,qBAUA,6BACE,0BACAe,iBAAe,EACfC,WAAW,QACXC,gCAAgC,EAChCpB,QAAS,SAAAO,GACP,IAAMc,EAAKd,EAAEe,OACbtB,EAAQqB,EAAGT,eAEVX,S,gCCzCX,OAAe,mBAACO,GACd,IAAMe,EAAQf,EAAKgB,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAAQJ,EAAY,GAAI,OACjDJ,GACFS,KAAK","file":"static/js/30.6df594a0.chunk.js","sourcesContent":["import React from 'react';\nimport CodePanel from '../../Components/CodePanel';\n\nexport default () => {\n  return (\n    <>\n      <section className=\"accent-bottom panel\">\n        <h2>Largest product in a series</h2>\n        <h4>Problem 8</h4>\n        <p>\n          The four adjacent digits in the 1000-digit number that have the greatest\n          product are 9 × 9 × 8 × 9 = 5832.\n        </p>\n        <div className=\"center font-mono nowrap\">\n          73167176531330624919225119674426574742355349194934\n          <br />\n          96983520312774506326239578318016984801869478851843\n          <br />\n          85861560789112949495459501737958331952853208805511\n          <br />\n          12540698747158523863050715693290963295227443043557\n          <br />\n          66896648950445244523161731856403098711121722383113\n          <br />\n          62229893423380308135336276614282806444486645238749\n          <br />\n          30358907296290491560440772390713810515859307960866\n          <br />\n          70172427121883998797908792274921901699720888093776\n          <br />\n          65727333001053367881220235421809751254540594752243\n          <br />\n          52584907711670556013604839586446706324415722155397\n          <br />\n          53697817977846174064955149290862569321978468622482\n          <br />\n          83972241375657056057490261407972968652414535100474\n          <br />\n          82166370484403199890008895243450658541227588666881\n          <br />\n          16427171479924442928230863465674813919123162824586\n          <br />\n          17866458359124566529476545682848912883142607690042\n          <br />\n          24219022671055626321111109370544217506941658960408\n          <br />\n          07198403850962455444362981230987879927244284909188\n          <br />\n          84580156166097919133875499200524063689912560717606\n          <br />\n          05886116467109405077541002256983155200055935729725\n          <br />\n          71636269561882670428252483600823257530420752963450\n        </div>\n        <p>\n          Find the thirteen adjacent digits in the 1000-digit number that have the\n          greatest product. What is the value of this product?\n        </p>\n      </section>\n      {/* prettier-ignore */}\n      <CodePanel title=\"JavaScript\">{`\n        m => {\n          let\n          c = 0,\n          n = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450';\n          n = n.split('');\n\n          for (let i = 0; i < n.length - m; i++) {\n            \n            let s = 1;\n\n            for (let j = 0; j < m; j++) {\n              s *= n[i + j];\n            }\n            if (s > c) {\n              c = s;\n            }\n          }\n          return c;\n        }\n    `}</CodePanel>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport removeIndentation from './CodePanel/removeIndentation';\nimport useToast from '../Hooks/useToast';\nimport './CodePanel/Style.scss';\n\ninterface CodePanelProps {\n  children: React.ReactNode;\n  onInput?: (text: string) => void;\n  title: string;\n}\n\nexport default React.memo(({ children, onInput = () => {}, title}: CodePanelProps) => {\n\n  const\n  code = removeIndentation(children as string),\n  toast = useToast();\n\n  useEffect(() => onInput(code), [onInput, code]);\n\n  return (\n    <div className=\"panel language-markup\">\n      <h3>{title}</h3>\n      <button\n      className=\"reset\"\n      onClick={e => {\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\n        navigator.clipboard.writeText(text)\n        .then(() => toast('copied to clipboard'))\n        .catch(() => toast('copy to clipboard failed'));       \n      }}>\n        Copy to Clipboard\n      </button>\n      <pre>\n        <code\n        contentEditable\n        spellCheck=\"false\"\n        suppressContentEditableWarning={true}\n        onInput={e => {\n          const el = e.target as HTMLElement;\n          onInput(el.textContent as string);\n        }}>\n          {code}\n        </code>\n      </pre>\n    </div>\n  );\n});","export default (text: string) => {\n  const lines = text.split(/\\r|\\n/);\n  lines.pop();\n  lines.shift();\n\n  const indentation = lines[0].match(/^\\s+/g) || [];\n\n  return (indentation\n    ? lines.map((line) => line.replace(indentation[0], ''))\n    : lines\n  ).join('\\r\\n');\n};"],"sourceRoot":""}