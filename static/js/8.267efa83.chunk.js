(this.webpackJsonppages=this.webpackJsonppages||[]).push([[8,47,55,62,83,86],{173:function(e,t,n){},174:function(e,t,n){},80:function(e,t,n){"use strict";n.r(t);var r=n(1),i=n.n(r),c=n(82),s=n(81),l=(n(174),n(0)),d=i.a.memo((function(e){var t=e.children,n=e.onInput,i=void 0===n?function(){}:n,d=e.title,a=Object(c.default)(t),o=Object(s.default)();return Object(r.useEffect)((function(){return i(a)}),[i,a]),Object(l.jsxs)("div",{className:"panel language-markup",children:[Object(l.jsx)("h3",{children:d}),Object(l.jsx)("button",{className:"reset",onClick:function(e){var t=e.currentTarget.parentNode.querySelector("code").textContent;navigator.clipboard.writeText(t).then((function(){return o("copied to clipboard")})).catch((function(){return o("copy to clipboard failed")}))},children:"Copy to Clipboard"}),Object(l.jsx)("pre",{children:Object(l.jsx)("code",{contentEditable:!0,spellCheck:"false",suppressContentEditableWarning:!0,onInput:function(e){var t=e.target;i(t.textContent)},children:a})})]})}));t.default=d},81:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return l}));var r=n(16),i=n(1),c=n(59),s=n.n(c);n(173);function l(){var e=Object(i.useState)(""),t=Object(r.a)(e,2),n=t[0],c=t[1];return Object(i.useEffect)((function(){return n&&s.a.toast({completeCallback:function(){return c("")},displayLength:2e3,html:n}),function(){return s.a.Toast.dismissAll()}}),[n]),c}},82:function(e,t,n){"use strict";function r(e){var t=e.split(/\r|\n/);t.pop(),t.shift();var n=t[0].match(/^\s+/g)||[];return(n?t.map((function(e){return e.replace(n[0],"")})):t).join("\r\n")}n.r(t),n.d(t,"default",(function(){return r}))},93:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return c}));var r=n(80),i=n(0);function c(){return Object(i.jsxs)(i.Fragment,{children:[Object(i.jsxs)("section",{className:"accent-bottom panel",children:[Object(i.jsx)("h2",{children:"Highly divisible triangular number"}),Object(i.jsx)("h4",{children:"Problem 12"}),Object(i.jsx)("p",{children:"The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:"}),Object(i.jsx)("div",{className:"center",children:"1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ..."}),Object(i.jsx)("p",{children:"Let us list the factors of the first seven triangle numbers:"}),Object(i.jsx)("table",{className:"concise-table container highlight striped",style:{lineHeight:"1rem",width:"10rem"},children:Object(i.jsxs)("tbody",{children:[Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"1:"}),Object(i.jsx)("td",{children:"1"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"3:"}),Object(i.jsx)("td",{children:"1, 3"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"6:"}),Object(i.jsx)("td",{children:"1, 2, 3, 6"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"10:"}),Object(i.jsx)("td",{children:"1, 2, 5, 10"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"15:"}),Object(i.jsx)("td",{children:"1, 3, 5, 15"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"21:"}),Object(i.jsx)("td",{children:"1, 3, 7, 21"})]}),Object(i.jsxs)("tr",{children:[Object(i.jsx)("td",{children:"28:"}),Object(i.jsx)("td",{children:"1, 2, 4, 7, 14, 28"})]})]})}),Object(i.jsx)("p",{children:"We can see that 28 is the first triangle number to have over five divisors."}),Object(i.jsx)("p",{children:"What is the value of the first triangle number to have over five hundred divisors?"})]}),Object(i.jsx)(r.default,{title:"JavaScript",children:"\n        m => {\n          let\n          primes = [],\n          tDividers = 1,\n          t1 = 1,\n          t2 = 1,\n\n          primeFactorization = n => {\n            \n            let dividers = 1;\n            \n            for (let key = 0; primes[key] <= n; key++) {\n              \n              let power = 1;\n              \n              while (n % primes[key] === 0) {\n                n /= primes[key];\n                power++;\n              }\n              dividers *= power;\n            }\n            return dividers;\n          };\n\n          const\n          list = Array(m * 4).fill(true);\n          list[0] = list[1] = false;\n          \n          list.map((v, k) => {\n            if (v) {\n              primes.push(k);\n              for (let key = k * k; key < list.length; key += k) {\n                list[key] = false;\n              }\n            }\n          });\n\n          for (var counter = 2; tDividers <= m ; counter++) {\n            if (counter % 2) {\n              t1 = primeFactorization((counter + 1) / 2);\n            }\n            else {\n              t2 = primeFactorization(counter + 1);\n            }\n            tDividers = t1 * t2;\n          }\n          return counter * (counter - 1) / 2;\n        }\n    "})]})}}}]);
//# sourceMappingURL=8.267efa83.chunk.js.map