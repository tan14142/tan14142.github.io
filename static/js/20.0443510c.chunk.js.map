{"version":3,"sources":["Projects/ProjectEuler/P27.tsx","Components/CodePanel.tsx","Hooks/useToast.ts","Components/CodePanel/removeIndentation.ts"],"names":["className","title","React","memo","children","onInput","code","removeIndentation","toast","useToast","useEffect","onClick","e","text","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","spellCheck","suppressContentEditableWarning","el","target","useState","message","setMessage","M","completeCallback","html","Toast","dismissAll","lines","split","pop","shift","indentation","match","map","line","replace","join"],"mappings":"gHAAA,mCAGe,qBACb,OACE,oCACE,6BAASA,UAAU,uBACjB,gDACA,0CACA,iFACA,yBAAKA,UAAU,UAAf,kBACA,iSAMA,6NAKA,kEACA,yBAAKA,UAAU,UAAf,uDAEE,6BAFF,+CAIE,6BAJF,+BAOA,wMAMF,kBAAC,UAAD,CAAWC,MAAM,cAAjB,0nC,4ECpCN,kDAWeC,cAAMC,MAAK,YAA6D,IAA1DC,EAAyD,EAAzDA,SAAyD,IAA/CC,eAA+C,MAArC,aAAqC,EAA3BJ,EAA2B,EAA3BA,MAGzDK,EAAOC,kBAAkBH,GACzBI,EAAQC,oBAIR,OAFAC,qBAAU,kBAAML,EAAQC,KAAO,CAACD,EAASC,IAGvC,yBAAKN,UAAU,yBACb,4BAAKC,GACL,4BACAD,UAAU,QACVW,QAAS,SAAAC,GACP,IAAMC,EAAOD,EAAEE,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAUP,GAC7BQ,MAAK,kBAAMb,EAAM,0BACjBc,OAAM,kBAAMd,EAAM,iCANrB,qBAUA,6BACE,0BACAe,iBAAe,EACfC,WAAW,QACXC,gCAAgC,EAChCpB,QAAS,SAAAO,GACP,IAAMc,EAAKd,EAAEe,OACbtB,EAAQqB,EAAGT,eAEVX,S,kFCrCI,qBAAO,IAAD,EAEWsB,mBAAS,IAFpB,mBAEZC,EAFY,KAEHC,EAFG,KAYnB,OARApB,qBAAU,WAKR,OAJAmB,GAAWE,IAAEvB,MAAM,CACjBwB,iBAAkB,kBAAMF,EAAW,KACnCG,KAAMJ,IAED,kBAAME,IAAEG,MAAMC,gBACpB,CAACN,IAEGC,I,gCChBT,OAAe,mBAACjB,GACd,IAAMuB,EAAQvB,EAAKwB,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAAQJ,EAAY,GAAI,OACjDJ,GACFS,KAAK","file":"static/js/20.0443510c.chunk.js","sourcesContent":["import React from 'react';\nimport CodePanel from '../../Components/CodePanel';\n\nexport default () => {\n  return (\n    <>\n      <section className=\"accent-bottom panel\">\n        <h2>Quadratic primes</h2>\n        <h4>Problem 27</h4>\n        <p>Euler discovered the remarkable quadratic formula:</p>\n        <div className=\"center\">n² + n + 41</div>\n        <p>\n          It turns out that the formula will produce 40 primes for the\n          consecutive integer values 0 ≤ n ≤ 39. However, when\n          n = 40, 40² + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and\n          certainly when n = 41, 41² + 41 + 41 is clearly divisible by 41.\n        </p>\n        <p>\n          The incredible formula n² - 79n + 1601 was discovered, which\n          produces 80 primes for the consecutive values 0 ≤ n ≤ 79. The\n          product of the coefficients, -79 and 1601, is -126479.\n        </p>\n        <p>Considering quadratics of the form:</p>\n        <div className=\"center\">\n          n² + an + b, where |a| &lt; 1000 and |b| ≤ 1000\n          <br />\n          where |n| is the modulus/absolute value of n\n          <br />\n          e.g. |11| = 11 and |-4| = 4\n        </div>\n        <p>\n          Find the product of the coefficients, a and b, for the quadratic\n          expression that produces the maximum number of primes for\n          consecutive values of n, starting with n = 0.\n        </p>\n      </section>\n      <CodePanel title=\"JavaScript\">{`\n        m => {\n          const primes = Array(m + 1).fill(true);\n          primes[0] = primes[1] = false;\n          \n          for (let i = 2; i < Math.sqrt(m); i++) {\n            if (primes[i]) {\n              for (let j = i * i; j <= m; j += i) {\n                primes[j] = false;\n              }\n            }\n          }\n          \n          let\n          result = { max: 0 },\n          swapB = b => {\n            let a = m % 2\n              ? -m + 2\n              : -m + 1;\n            \n            for (; a < m; a += 2) {\n            \n              let n = 0;\n              \n              while (primes[n * n + n * a + b]) {\n                n++;\n              }\n              \n              if (n > result.max) {\n                result = {\n                  a: a,\n                  b: b,\n                  max: n\n                };\n              }\n            }\n          };\n          \n          for (let i = m; i >= 0; i--) {\n            if (primes[i]) {\n              swapB(i);\n              swapB(-i);\n            }\n          }\n\n          return result.a * result.b;\n        }\n    `}</CodePanel>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport removeIndentation from './CodePanel/removeIndentation';\nimport useToast from '../Hooks/useToast';\nimport './CodePanel/Style.scss';\n\ninterface CodePanelProps {\n  children: React.ReactNode;\n  onInput?: (text: string) => void;\n  title: string;\n}\n\nexport default React.memo(({ children, onInput = () => {}, title}: CodePanelProps) => {\n\n  const\n  code = removeIndentation(children as string),\n  toast = useToast();\n\n  useEffect(() => onInput(code), [onInput, code]);\n\n  return (\n    <div className=\"panel language-markup\">\n      <h3>{title}</h3>\n      <button\n      className=\"reset\"\n      onClick={e => {\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\n        navigator.clipboard.writeText(text)\n        .then(() => toast('copied to clipboard'))\n        .catch(() => toast('copy to clipboard failed'));       \n      }}>\n        Copy to Clipboard\n      </button>\n      <pre>\n        <code\n        contentEditable\n        spellCheck=\"false\"\n        suppressContentEditableWarning={true}\n        onInput={e => {\n          const el = e.target as HTMLElement;\n          onInput(el.textContent as string);\n        }}>\n          {code}\n        </code>\n      </pre>\n    </div>\n  );\n});","import { useEffect, useState } from \"react\";\nimport M from 'materialize-css';\nimport './useToast/Style.scss';\n\nexport default () => {\n\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    message && M.toast({\n      completeCallback: () => setMessage(''),\n      html: message\n    });\n    return () => M.Toast.dismissAll();\n  }, [message]);\n\n  return setMessage;\n};","export default (text: string) => {\n  const lines = text.split(/\\r|\\n/);\n  lines.pop();\n  lines.shift();\n\n  const indentation = lines[0].match(/^\\s+/g) || [];\n\n  return (indentation\n    ? lines.map((line) => line.replace(indentation[0], ''))\n    : lines\n  ).join('\\r\\n');\n};"],"sourceRoot":""}