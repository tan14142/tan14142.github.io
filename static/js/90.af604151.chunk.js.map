{"version":3,"sources":["Projects/WorldPopulation/transformCSV.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"names":["transformCSV","response","a","csvParse","text","data","sets","Array","fill","forEach","series","key","years","Object","entries","type","pop","region","year","value","push","length","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"mappings":"wMAEe,SAAeA,EAA9B,kC,4CAAe,WAA4BC,GAA5B,iBAAAC,EAAA,kEAENC,IAFM,SAESF,EAASG,OAFlB,0BAEbC,GAFa,cAGbC,EAAO,IAAIC,MAAM,MAAMC,KAAK,MAE5BH,EAAKI,SAAQ,SAACC,EAAQC,GAMpB,IALA,IACAC,EAAQC,OAAOC,QAAQJ,GACvBK,EAAOH,EAAMI,MAAO,GACpBC,EAASL,EAAMI,MAAO,GAEtB,MAA4BJ,EAA5B,eAAmC,CAA9B,0BAAOM,EAAP,KAAaC,EAAb,KACS,IAARR,IACFL,GAAMY,GAAQ,IAEZP,EAAM,IAAM,GACdL,GAAMY,GAAME,KAAZ,eAAmBH,EAAmB,KAExCX,GAAMY,GAAMZ,GAAMY,GAAMG,OAAS,GAAGJ,GAAkBF,GAAkBI,MAlB/D,kBAqBNb,GArBM,4C,yDCFf,SAASgB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQhB,EAAKiB,GACpE,IACE,IAAIC,EAAON,EAAIZ,GAAKiB,GAChBT,EAAQU,EAAKV,MACjB,MAAOW,GAEP,YADAL,EAAOK,GAILD,EAAKE,KACPP,EAAQL,GAERa,QAAQR,QAAQL,GAAOc,KAAKP,EAAOC,GAIxB,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUR,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMP,GACbG,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQR,GAGlE,SAASQ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,GAGnEf,OAAMgB,OA/BZ","file":"static/js/90.af604151.chunk.js","sourcesContent":["import { csvParse } from 'd3';\r\n\r\nexport default async function transformCSV(response: Response) {\r\n  const\r\n  data = csvParse(await response.text()) as any[],\r\n  sets = new Array(1960).fill(null);\r\n\r\n  data.forEach((series, key) => {\r\n    const\r\n    years = Object.entries(series),\r\n    type = years.pop()![1],\r\n    region = years.pop()![1];\r\n\r\n    for (const [year, value] of years) {\r\n      if (key === 0) {\r\n        sets[+year] = [];\r\n      }\r\n      if (key % 2 === 0) {\r\n        sets[+year].push({[region as string]: {}})\r\n      }\r\n      sets[+year][sets[+year].length - 1][region as string][type as string] = value;\r\n    }\r\n  });\r\n  return sets;\r\n};","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"sourceRoot":""}