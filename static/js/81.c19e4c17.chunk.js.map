{"version":3,"sources":["Components/CodePanel/removeIndentation.ts","Components/CodePanel/Code.tsx","Hooks/useToast.ts"],"names":["removeIndentation","text","lines","split","pop","shift","indentation","match","map","line","replace","join","Code","indent","lang","onInput","toast","useToast","code","Object","values","useEffect","className","onClick","e","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","keys","toLowerCase","spellCheck","suppressContentEditableWarning","el","target","useState","message","setMessage","M","completeCallback","displayLength","html","Toast","dismissAll"],"mappings":"gIAAe,SAASA,EAAkBC,GACxC,IAAMC,EAAQD,EAAKE,MAAM,SACzBD,EAAME,MACNF,EAAMG,QAEN,IAAMC,EAAcJ,EAAM,GAAGK,MAAM,UAAY,GAE/C,OAAQD,EACJJ,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAAQJ,EAAY,GAAI,OACjDJ,GACFS,KAAK,QAVT,gD,gCCCA,iFAKe,SAASC,EAAT,GAAuE,IAAD,IAAtDC,cAAsD,SAAvCC,EAAuC,EAAvCA,KAAuC,IAAjCC,eAAiC,MAAvB,aAAuB,EAE7EC,EAAQC,oBACVC,EAAOC,OAAOC,OAAON,GAAM,GAQ/B,OANKD,IACHK,EAAOlB,kBAAkBkB,IAG3BG,qBAAU,kBAAMN,EAAQG,KAAO,CAACH,EAASG,IAGvC,qCACE,wBACAI,UAAU,QACVC,QAAS,SAAAC,GACP,IAAMvB,EAAOuB,EAAEC,cAAcC,WAAYC,cAAc,QAASC,YAChEC,UAAUC,UAAUC,UAAU9B,GAC7B+B,MAAK,kBAAMhB,EAAM,0BACjBiB,OAAM,kBAAMjB,EAAM,gCANrB,+BAUA,8BACE,sBACAkB,iBAAe,EACfZ,UAAW,iBAAmBH,OAAOgB,KAAKrB,GAAM,GAAGsB,cACnDC,WAAW,QACXC,gCAAgC,EAChCvB,QAAS,SAAAS,GACP,IAAMe,EAAKf,EAAEgB,OACbzB,EAAQwB,EAAGX,cAPb,SASGV,W,0HCnCI,SAASD,IAEtB,MAA8BwB,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATAtB,qBAAU,WAMR,OALAqB,GAAWE,IAAE5B,MAAM,CACjB6B,iBAAkB,kBAAMF,EAAW,KACnCG,cAAe,IACfC,KAAML,IAED,kBAAME,IAAEI,MAAMC,gBACpB,CAACP,IAEGC","file":"static/js/81.c19e4c17.chunk.js","sourcesContent":["export default function removeIndentation(text: string) {\r\n  const lines = text.split(/\\r|\\n/);\r\n  lines.pop();\r\n  lines.shift();\r\n\r\n  const indentation = lines[0].match(/^\\s+/g) || [];\r\n\r\n  return (indentation\r\n    ? lines.map((line) => line.replace(indentation[0], ''))\r\n    : lines\r\n  ).join('\\r\\n');\r\n};","\r\nimport { useEffect } from 'react';\r\nimport removeIndentation from './removeIndentation';\r\nimport useToast from '../../Hooks/useToast';\r\nimport { CodeProps } from './CodeProps';\r\n\r\nexport default function Code({ indent = true, lang, onInput = () => {} }: CodeProps) {\r\n  \r\n  const toast = useToast();\r\n  let code = Object.values(lang)[0];\r\n\r\n  if (!indent) {\r\n    code = removeIndentation(code)\r\n  }\r\n\r\n  useEffect(() => onInput(code), [onInput, code]);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n      className=\"reset\"\r\n      onClick={e => {\r\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\r\n        navigator.clipboard.writeText(text)\r\n        .then(() => toast('copied to clipboard'))\r\n        .catch(() => toast('copy to clipboard failed'));       \r\n      }}>\r\n        Copy to Clipboard\r\n      </button>\r\n      <pre>\r\n        <code\r\n        contentEditable\r\n        className={\"hljs language-\" + Object.keys(lang)[0].toLowerCase()}\r\n        spellCheck=\"false\"\r\n        suppressContentEditableWarning={true}\r\n        onInput={e => {\r\n          const el = e.target as HTMLElement;\r\n          onInput(el.textContent as string);\r\n        }}>\r\n          {code}\r\n        </code>\r\n      </pre>\r\n    </>\r\n  );\r\n};","import { useEffect, useState } from \"react\";\r\nimport M from 'materialize-css';\r\nimport './useToast/Style.scss';\r\n\r\nexport default function useToast() {\r\n\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    message && M.toast({\r\n      completeCallback: () => setMessage(''),\r\n      displayLength: 2000,\r\n      html: message\r\n    });\r\n    return () => M.Toast.dismissAll();\r\n  }, [message]);\r\n\r\n  return setMessage;\r\n};"],"sourceRoot":""}