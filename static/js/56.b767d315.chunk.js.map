{"version":3,"sources":["Projects/ProjectEuler/P18.tsx","Components/CodePanel/removeIndentation.ts","Components/Tabs.tsx","Components/CodePanel/Code.tsx","Hooks/useHighlight.ts","Components/CodePanel.tsx"],"names":["P18","lang","className","style","minWidth","removeIndentation","text","lines","split","pop","shift","indentation","match","map","line","replace","join","Tabs","children","tabs","elRef","useRef","useEffect","M","init","current","destroy","ref","title","key","to","React","Children","toArray","child","id","Code","indent","onInput","toast","useToast","code","Object","values","onClick","e","currentTarget","parentNode","querySelector","textContent","navigator","clipboard","writeText","then","catch","contentEditable","keys","toLowerCase","spellCheck","suppressContentEditableWarning","el","target","useHighlight","link","script","window","hljs","document","createElement","rel","href","src","onload","highlightAll","body","appendChild","removeChild","CodePanel","entries","entry"],"mappings":"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","file":"static/js/56.b767d315.chunk.js","sourcesContent":["import CodePanel from '../../Components/CodePanel';\r\nimport { LangProps } from '../../Components/CodePanel/LangProps';\r\n\r\nexport default function P18({lang}: LangProps) {\r\n  return (\r\n    <>\r\n      <section className=\"accent-bottom panel\">\r\n        <h2>Maximum path sum I</h2>\r\n        <h4>Problem 18</h4>\r\n        <p>\r\n          By starting at the top of the triangle below and moving to adjacent\r\n          numbers on the row below, the maximum total from top to bottom is 23.\r\n        </p>\r\n        <div className=\"center font-mono\">\r\n          <span className=\"red-text\">3</span>\r\n          <br />\r\n          <span className=\"red-text\">7</span> 4\r\n          <br />\r\n          2 <span className=\"red-text\">4</span> 6\r\n          <br />\r\n          8 5 <span className=\"red-text\">9</span> 3\r\n        </div>\r\n        <p>That is, 3 + 7 + 4 + 9 = 23.</p>\r\n        <p>Find the maximum total from top to bottom of the triangle below:</p>\r\n        <div className=\"center font-mono nowrap\">\r\n          <div style={{ minWidth: 480 }}>\r\n            75\r\n            <br />\r\n            95 64\r\n            <br />\r\n            17 47 82\r\n            <br />\r\n            18 35 87 10\r\n            <br />\r\n            20 04 82 47 65\r\n            <br />\r\n            19 01 23 75 03 34\r\n            <br />\r\n            88 02 77 73 07 63 67\r\n            <br />\r\n            99 65 04 28 06 16 70 92\r\n            <br />\r\n            41 41 26 56 83 40 80 70 33\r\n            <br />\r\n            41 48 72 33 47 32 37 16 94 29\r\n            <br />\r\n            53 71 44 65 25 43 91 52 97 51 14\r\n            <br />\r\n            70 11 33 28 77 73 17 78 39 68 17 57\r\n            <br />\r\n            91 71 52 38 17 14 91 43 58 50 27 29 48\r\n            <br />\r\n            63 66 04 68 89 53 67 30 73 16 69 87 40 31\r\n            <br />\r\n            04 62 98 27 23 09 70 98 73 93 38 53 60 04 23\r\n          </div>\r\n        </div>\r\n        <p>\r\n          NOTE: As there are only 16384 routes, it is possible to solve this\r\n          problem by trying every route. However, Problem 67, is the same\r\n          challenge with a triangle containing one-hundred rows; it cannot be\r\n          solved by brute force, and requires a clever method! ;o)\r\n        </p>\r\n      </section>\r\n      <CodePanel lang={lang} />\r\n    </>\r\n  );\r\n};","export default function removeIndentation(text: string) {\r\n  const lines = text.split(/\\r|\\n/);\r\n  lines.pop();\r\n  lines.shift();\r\n\r\n  const indentation = lines[0].match(/^\\s+/g) || [];\r\n\r\n  return (indentation\r\n    ? lines.map((line) => line.replace(indentation[0], ''))\r\n    : lines\r\n  ).join('\\r\\n');\r\n};","import React, { useEffect, useRef } from \"react\";\r\nimport{ Link } from \"react-router-dom\";\r\nimport M from 'materialize-css';\r\nimport './Tabs/Style.scss';\r\n\r\ninterface TabsProps {\r\n  children: React.ReactNode;\r\n  tabs: string[];\r\n}\r\n\r\nexport default function Tabs({ children, tabs }: TabsProps) {\r\n\r\n  const elRef = useRef<HTMLUListElement>(null);\r\n\r\n  useEffect(() => {\r\n    const tabs = M.Tabs.init(elRef.current as Element, {});\r\n    return () => tabs.destroy();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"tabs\" ref={elRef}>\r\n        {tabs.map((title, key) => \r\n          <li className=\"tab\" key={key}>\r\n            <Link to={\"#\" + title}>\r\n              {title}\r\n            </Link>\r\n          </li>\r\n        )}\r\n      </ul>\r\n      {React.Children.toArray(children).map((child, key) => \r\n        <div\r\n        className=\"flex-column\"\r\n        id={tabs[key]}\r\n        key={key}>\r\n          {child}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};","\r\nimport { useEffect } from 'react';\r\nimport removeIndentation from './removeIndentation';\r\nimport useToast from '../../Hooks/useToast';\r\nimport { CodeProps } from './CodeProps';\r\n\r\nexport default function Code({ indent = true, lang, onInput = () => {} }: CodeProps) {\r\n  \r\n  const toast = useToast();\r\n  let code = Object.values(lang)[0];\r\n\r\n  if (!indent) {\r\n    code = removeIndentation(code)\r\n  }\r\n\r\n  useEffect(() => onInput(code), [onInput, code]);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n      className=\"reset\"\r\n      onClick={e => {\r\n        const text = e.currentTarget.parentNode!.querySelector('code')!.textContent!;\r\n        navigator.clipboard.writeText(text)\r\n        .then(() => toast('copied to clipboard'))\r\n        .catch(() => toast('copy to clipboard failed'));       \r\n      }}>\r\n        Copy to Clipboard\r\n      </button>\r\n      <pre>\r\n        <code\r\n        contentEditable\r\n        className={\"hljs language-\" + Object.keys(lang)[0].toLowerCase()}\r\n        spellCheck=\"false\"\r\n        suppressContentEditableWarning={true}\r\n        onInput={e => {\r\n          const el = e.target as HTMLElement;\r\n          onInput(el.textContent as string);\r\n        }}>\r\n          {code}\r\n        </code>\r\n      </pre>\r\n    </>\r\n  );\r\n};","import { useEffect } from 'react';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    hljs: any;\r\n  }\r\n}\r\n\r\nexport default function useHighlight() {\r\n  \r\n  useEffect(() => {\r\n\r\n    let\r\n    link: any,\r\n    script: any;\r\n\r\n    if (!window.hljs) {\r\n      window.hljs = true;\r\n\r\n      link = document.createElement('link');\r\n      link.rel = 'stylesheet';\r\n      link.href = 'https://unpkg.com/@highlightjs/cdn-assets@11.1.0/styles/default.min.css';\r\n\r\n      script = document.createElement('script');\r\n      script.src = 'https://unpkg.com/@highlightjs/cdn-assets@11.1.0/highlight.min.js';\r\n      script.onload = () => window.hljs.highlightAll();\r\n    \r\n      document.body.appendChild(link);\r\n      document.body.appendChild(script);\r\n    }\r\n    \r\n    return () => {\r\n      typeof link === 'object' && document.body.removeChild(link);\r\n      typeof script === 'object' && document.body.removeChild(script);\r\n      delete window.hljs;\r\n    }\r\n  }, []);\r\n}","import Code from './CodePanel/Code';\r\nimport Tabs from './Tabs';\r\nimport './CodePanel/Style.scss';\r\nimport { CodeProps } from './CodePanel/CodeProps';\r\nimport useHighlight from '../Hooks/useHighlight';\r\n\r\nexport default function CodePanel({ lang, indent = true, onInput = () => {} }: CodeProps) {\r\n\r\n  useHighlight();\r\n\r\n  return (\r\n    <div className=\"panel language-markup\">\r\n      <Tabs tabs={Object.keys(lang)}>\r\n        {Object.entries(lang).map(\r\n          (entry, key) => <Code indent={indent} key={key} lang={{[entry[0]]: entry[1]}} onInput={onInput} />\r\n        )}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};"],"sourceRoot":""}